### YamlMime:QSharpType
uid: microsoft.quantum.simulation.blockencodingreflectionbylcu
name: BlockEncodingReflectionByLCU
type: function
namespace: Microsoft.Quantum.Simulation
summary: >-
  Codiert einen relevanten Operator in einen `BlockEncodingReflection`.


  Dadurch wird ein `BlockEncodingReflection` einheitlicher $U = p\cdot v\cdot P ^ \dagger $ erstellt, der einen Operator $H = \sum_{j} | \alpha_j | U_j $ von Interesse, bei dem es sich um eine lineare Kombination von uniflüssen handelt. In der Regel ist $P $ eine einheitliche Zustands Vorbereitung, z. b. $P \ket{0}\_a\sum_j\sqrt {\ alpha_j/\|\vec\alpha\|\_2} \ket{j}\_a $ und $V = \sum_{j}\ket{j}\bra{j}\_a\otimes U_ j $.
remarks: Diese `BlockEncoding` Implementierung gibt Ihnen die Eigenschaften eines `BlockEncodingReflection`.
syntax: 'function BlockEncodingReflectionByLCU (statePreparation : (Qubit[] => Unit is Adj + Ctl), selector : ((Qubit[], Qubit[]) => Unit is Adj + Ctl)) : Microsoft.Quantum.Simulation.BlockEncodingReflection'
input:
  content: '(statePreparation : (Qubit[] => Unit is Adj + Ctl), selector : ((Qubit[], Qubit[]) => Unit is Adj + Ctl))'
  types:
  - name: statePreparation
    summary: Ein einheitlicher $P $, der einen bestimmten Ziel Status vorbereitet.
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
  - name: selector
    summary: Ein einheitlicher $V $, der die Komponenten unierungen von $H $ codiert.
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
      - isArray: true
        isPrimitive: true
        uid: Qubit
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
output:
  content: Microsoft.Quantum.Simulation.BlockEncodingReflection
  types:
  - summary: Ein einheitlicher $U $, der gemeinsam für die Register `a` registriert und `s`, dass $H $ blockiert und $U "^{-1} = U $" erfüllt.
    uid: microsoft.quantum.simulation.blockencodingreflection
seeAlso:
- microsoft.quantum.canon.blockencoding
- microsoft.quantum.canon.blockencodingreflection
ms.openlocfilehash: a092068a61d860074ace150b0c7872eb064a63b9
ms.sourcegitcommit: 8becfb03eb60ba205c670a634ff4daa8071bcd06
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 10/31/2019
ms.locfileid: "73219160"

### YamlMime:QSharpType
uid: microsoft.quantum.simulation.blockencodingreflectionbylcu
name: BlockEncodingReflectionByLCU
type: function
namespace: Microsoft.Quantum.Simulation
summary: >-
  Codiert einen relevanten Operator in eine `BlockEncodingReflection`.


  Dadurch wird ein `BlockEncodingReflection` einheitlicher $U = p\cdot v\cdot P ^ \dagger $ erstellt, der einen Operator $H = \ sum_ {j} | \ alpha_j codiert | U_j $ von Interesse, bei dem es sich um eine lineare Kombination von uniflüssen handelt. In der Regel ist $P $ eine einheitliche Zustands Vorbereitung, z. b{0}\_. $P \ket\|a \ sum_j \sqrt{\ alpha_j/\|\_\vec\alpha 2} \ket{j}\_a $ und $V = \ sum_ {\_j} \ket{j}\bra{j} a\otimes U_j $.
remarks: Diese `BlockEncoding` Implementierung gibt Ihnen die Eigenschaften eines `BlockEncodingReflection`.
syntax: 'function BlockEncodingReflectionByLCU (statePreparation : (Qubit[] => Unit is Adj + Ctl), selector : ((Qubit[], Qubit[]) => Unit is Adj + Ctl)) : Microsoft.Quantum.Simulation.BlockEncodingReflection'
input:
  content: '(statePreparation : (Qubit[] => Unit is Adj + Ctl), selector : ((Qubit[], Qubit[]) => Unit is Adj + Ctl))'
  types:
  - name: statePreparation
    summary: Ein einheitlicher $P $, der einen bestimmten Ziel Status vorbereitet.
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
  - name: selector
    summary: Ein einheitlicher $V $, der die Komponenten unierungen von $H $ codiert.
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
      - isArray: true
        isPrimitive: true
        uid: Qubit
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
output:
  content: Microsoft.Quantum.Simulation.BlockEncodingReflection
  types:
  - summary: Ein einheitlicher $U $, der gemeinsam für `a` Register `s` agiert und $H $ codiert und $U "^{-1} = U $" erfüllt.
    uid: microsoft.quantum.simulation.blockencodingreflection
seeAlso:
- microsoft.quantum.canon.blockencoding
- microsoft.quantum.canon.blockencodingreflection
metadata:
  ms.openlocfilehash: 8fe23d346a09e245d41f2a0c242462b5300561e1
  ms.sourcegitcommit: db23885adb7ff76cbf8bd1160d401a4f0471e549
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 05/01/2020
  ms.locfileid: "82687099"

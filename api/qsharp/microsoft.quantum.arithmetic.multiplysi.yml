### YamlMime:QSharpType
uid: microsoft.quantum.arithmetic.multiplysi
name: MultiplySI
type: operation
namespace: microsoft.quantum.arithmetic
summary: Multiplizieren Sie eine ganze Zahl `xs` mit Vorzeichen `ys` , und speichern Sie das Ergebnis in `result` , das anfänglich NULL sein muss.
syntax: 'operation MultiplySI (xs : Microsoft.Quantum.Arithmetic.SignedLittleEndian, ys : Microsoft.Quantum.Arithmetic.SignedLittleEndian, result : Microsoft.Quantum.Arithmetic.SignedLittleEndian) : Unit'
input:
  content: '(xs : Microsoft.Quantum.Arithmetic.SignedLittleEndian, ys : Microsoft.Quantum.Arithmetic.SignedLittleEndian, result : Microsoft.Quantum.Arithmetic.SignedLittleEndian)'
  types:
  - name: xs
    summary: n-Bit Multiplikand (signedlittleendian)
    uid: microsoft.quantum.arithmetic.signedlittleendian
  - name: ys
    summary: n-Bit-Multiplikator (signedlittleendian)
    uid: microsoft.quantum.arithmetic.signedlittleendian
  - name: result
    summary: Das 2N-Bit-Ergebnis (signedlittleendian) muss zunächst den Status $ \ket {0} $ aufweisen.
    uid: microsoft.quantum.arithmetic.signedlittleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
metadata:
  ms.openlocfilehash: e81995b6dfb20ddd3e3e3139831d3cc43bfd60da
  ms.sourcegitcommit: d6ac6f4345be0dd68f1bcd944f44b08e7a3cf346
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 09/02/2020
  ms.locfileid: "89353395"

### YamlMime:QSharpType
uid: microsoft.quantum.convert.boolarrayaspauli
name: BoolArrayAsPauli
type: function
namespace: Microsoft.Quantum.Convert
summary: Gibt bei Angabe einer Bitzeichenfolge einen multiqubit-Pauli-Operator zurück, der als Array von Single-Qubit-Pauli-Operatoren dargestellt wird.
remarks: Das boolesche Array und das Quantum-Register müssen die gleiche Länge aufweisen.
syntax: 'function BoolArrayAsPauli (pauli : Pauli, bitApply : Bool, bits : Bool[]) : Pauli[]'
input:
  content: '(pauli : Pauli, bitApply : Bool, bits : Bool[])'
  types:
  - name: pauli
    summary: Der Pauli-Operator, der auf Qubits angewendet wird, wenn `bitsApply == bits[idx]`.
    isPrimitive: true
    uid: Pauli
  - name: bitApply
    summary: Anwenden von Pauli, wenn Bit dieser Wert ist.
    isPrimitive: true
    uid: Bool
  - name: bits
    summary: Boolesches Array.
    isArray: true
    isPrimitive: true
    uid: Bool
output:
  content: Pauli[]
  types:
  - isArray: true
    isPrimitive: true
    uid: Pauli
ms.openlocfilehash: 3d251215e7f7bc136092caf7bafd677ecb1c05bd
ms.sourcegitcommit: 8becfb03eb60ba205c670a634ff4daa8071bcd06
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 10/31/2019
ms.locfileid: "73227184"

### YamlMime:QSharpType
uid: microsoft.quantum.convert.boolarrayaspauli
name: BoolArrayAsPauli
type: function
namespace: Microsoft.Quantum.Convert
summary: Gibt bei Angabe einer Bitzeichenfolge einen multiqubit-Pauli-Operator zurück, der als Array von Single-Qubit-Pauli-Operatoren dargestellt wird.
remarks: Das boolesche Array und das Quantum-Register müssen die gleiche Länge aufweisen.
syntax: 'function BoolArrayAsPauli (pauli : Pauli, bitApply : Bool, bits : Bool[]) : Pauli[]'
input:
  content: '(pauli : Pauli, bitApply : Bool, bits : Bool[])'
  types:
  - name: pauli
    summary: Der Pauli-Operator, der auf Qubits angewendet wird, wobei `bitsApply == bits[idx]`.
    isPrimitive: true
    uid: Pauli
  - name: bitApply
    summary: Anwenden von Pauli, wenn Bit dieser Wert ist.
    isPrimitive: true
    uid: Bool
  - name: bits
    summary: Boolesches Array.
    isArray: true
    isPrimitive: true
    uid: Bool
output:
  content: Pauli[]
  types:
  - isArray: true
    isPrimitive: true
    uid: Pauli
metadata:
  ms.openlocfilehash: c4f43eb0a30e42b6deb28c9910b1c95454b827c8
  ms.sourcegitcommit: db23885adb7ff76cbf8bd1160d401a4f0471e549
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 05/01/2020
  ms.locfileid: "82661357"

### YamlMime:QSharpNamespace
uid: microsoft.quantum.amplitudeamplification
name: Microsoft.Quantum.AmplitudeAmplification
summary: " # <a name=\"summary\"></a>Zusammenfassung\n Dieser Namespace enthält Funktionen und Vorgänge zum Durchführen der Amplitude-Verstärkung.\n\n # <a name=\"description\"></a>description\n Eine schrägende Amplitude-Verstärkung mit partiellen Reflektionen ist die allgemeinste Form der hier implementierten Amplitude-Verstärkung.\n\n Dies wird durch den Vorgang ampampobliviousbyreflectionphasen aufgerufen.\n\n Dies hat zwei Register: `ancillaRegister` und `systemRegister`.\n\n Dies akzeptiert zwei Oracles für diese Reflektionen vom Typ `ReflectionOracle` die nur für das `ancillaRegister` Register fungieren.\n\n Dies akzeptiert eine Oracle-spezielle Verstärkung der Amplitude-Verstärkung vom Typ `ObliviousOracle`, die zusammen für beide Register fungiert.\n\n Es wird angenommen, dass es sich bei dem Eingabe Status `ancillaRegister` um den eindeutigen $-$1-eigen Status des ersten reflektionsoperators $I-2 \\ Ket {s} \\ Bra {s} $ handelt.\n\n Reflektionen zu einem Ziel-Quantenzustand werden häufig implementiert, indem der Zugriff auf ein Oracle angenommen wird, das diesen Zustand von der Berechnungsbasis auf \"$ \\ket{0\\cdots 0} $\" vorbereitet.\n\n Unsere Konvention für diese Oracles erfordert zwei Register: ein Single-Qubit-`flagQubit` Register und ein Register für alles andere im Register \"ancillaregister\".\n\n Das Oracle vom Typ `StateOracle` fungiert gemeinsam für beide Register, um den Ziel Status zu erstellen, der durch $ \\ket{1}$ im `flagQubit` Register mit einer echten Amplitude gekennzeichnet wird.\n\n Die Reflektions`ReflectionOracle` über den Status dieses Flags wird durch den Vorgang `TargetStateReflectionOracle`generiert.\n\n Der Reflektions`ReflectionOracle` zum Eingabe Status `ancillaRegister` wird vom umgekehrten stateoracle generiert und dann über \"$ \\ket{0\\cdots 0} $\" mit reflectionstart () reflektiert.\n\n Das Oracle vom Typ `DeterministicStateOracle` verhält sich für die `qubitState` Register, um den Zielzustand genau ohne Flag zu erstellen.\n\n `AmpAmpObliviousByOraclePhases` ist eine Version der pervironen Amplitude-Verstärkung, die Oracles `StateOracle` und `ObliviousOracle` anstelle von Reflektionen akzeptiert.\n\n Beachten Sie, dass die Amplitude-Verstärkung ein Sonderfall für eine schrägene Amplitude-Verstärkung ist, bei der `ObliviousOracle` der Identitäts Operator ist und keine System-Qubits vorhanden sind, d. h. `systemRegister` leer ist.\n\n Dies wird durch den Vorgang `AmpAmByReflectionPhases` und `AmpAmpByOraclePhases`aufgerufen.\n\n Die Phasen für partielle Reflektionen im Standardfall der Grover-Suche werden von der Funktion ampampphasesstandard bereitgestellt.\n\n Beispielsweise haben wir die folgenden Abhängigkeiten: ampampbyoracle-> ampampbyoraclephasen-> ampampobliviousbyoraclephasen-> ampampobliviousbyreflectionphasen."
functions:
- uid: microsoft.quantum.amplitudeamplification.ampampbyoracle
  summary: Standard mäßiger Amplitude-Verstärkungs Algorithmus
- uid: microsoft.quantum.amplitudeamplification.ampampbyoraclephases
  summary: Amplitude-Verstärkung durch Oracles für partielle Reflektionen.
- uid: microsoft.quantum.amplitudeamplification.ampampbyreflectionsphases
  summary: Amplitude-Verstärkung durch partielle Reflektionen.
- uid: microsoft.quantum.amplitudeamplification.ampampobliviousbyoraclephases
  summary: Pervirone Amplitude-Verstärkung durch Oracles für partielle Reflektionen.
- uid: microsoft.quantum.amplitudeamplification.ampampobliviousbyreflectionphases
  summary: Gibt eine einheitliche zurück, die die Verstärkung der Amplitude durch die Angabe von für partielle Reflektionen implementiert.
- uid: microsoft.quantum.amplitudeamplification.ampampphasesfixedpoint
  summary: Berechnet partielle reflektionsprozesse für die Verstärkung der Amplitude-Amplitude mit fester Breite.
- uid: microsoft.quantum.amplitudeamplification.ampampphasesstandard
  summary: Berechnet partielle Reflexionsphasen für die standardmäßige Amplitude-Verstärkung.
- uid: microsoft.quantum.amplitudeamplification.ampamprotationtoreflectionphases
  summary: Konvertiert als Single-Qubit-Drehungen angegebene Phasen in Phasen, die als partielle Reflektionen angegeben sind.
- uid: microsoft.quantum.amplitudeamplification.reflectionstart
  summary: Erstellt eine Reflektion über die Zeichenfolge "All-NULL" | 0... 0 〉, was der typische Eingabe Zustand der Amplitude-Verstärkung ist.
- uid: microsoft.quantum.amplitudeamplification.targetstatereflectionoracle
  summary: >-
    Erstellt eine `ReflectionOracle` über den Zielzustand, der durch das Flag "Qubit" eindeutig gekennzeichnet ist.


    Der Ziel Status verfügt über ein einzelnes Qubit, das auf 1 festgelegt ist, und alle anderen 0: $ \ket{1}_F $.
operations:
- uid: microsoft.quantum.amplitudeamplification.ampamprusbyoracle
  summary: Modifizierungsalgorithmus mit fester Punkt Amplitude
newtypes:
- uid: microsoft.quantum.amplitudeamplification.reflectionphases
  summary: Phasen für eine Sequenz von partiellen Reflektionen bei der Amplitude-Verstärkung.
- uid: microsoft.quantum.amplitudeamplification.rotationphases
  summary: Phasen für eine Sequenz von Single-Qubit-Drehungen in der Amplitude-Verstärkung.
metadata:
  ms.openlocfilehash: acec4d085e42811618228c8e120842dc400c50b4
  ms.sourcegitcommit: edcf15044d7bdf4f8b21fb8f6af4bde475eb13a0
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 11/05/2019
  ms.locfileid: "73057179"

### YamlMime:QSharpType
uid: microsoft.quantum.canon.applytoeacha
name: ApplyToEachA
type: operation
namespace: Microsoft.Quantum.Canon
summary: >-
  Wendet für jedes Element in einem Register einen Single-Qubit-Vorgang an.

  Der-Modifizierer `A` gibt an, dass der Single-Qubit-Vorgang adjointable ist.
examples: >-
  Bereiten Sie einen "3-Qubit $ \ket{+} $"-Status vor:


  ```qsharp

  using (register = Qubit[3]) {
      ApplyToEach(H, register);
  }

  ```
syntax: "operation ApplyToEachA (singleElementOperation : ('T => Unit is Adj), register : 'T[]) : Unit"
input:
  content: "(singleElementOperation : ('T => Unit is Adj), register : 'T[])"
  types:
  - name: singleElementOperation
    summary: Der auf die einzelnen Qubits anzuwendende Vorgang.
    isOperation: true
    input:
      types:
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
  - name: register
    summary: Ein Array von Qubits, auf das der angegebene Vorgang angewendet werden soll.
    isArray: true
    uid: "'T"
    isLocal: true
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
typeParameters:
- uid: "'T"
  summary: Das Ziel, für das der Vorgang fungiert.
functors:
- Adjoint
seeAlso:
- microsoft.quantum.canon.applytoeach
metadata:
  ms.openlocfilehash: 8638734df992bc0ae76b8d19e46c65a1ffd57981
  ms.sourcegitcommit: db23885adb7ff76cbf8bd1160d401a4f0471e549
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 05/01/2020
  ms.locfileid: "82674917"

### YamlMime:QSharpType
uid: microsoft.quantum.preparation.statepreparationpositivecoefficients
name: StatePreparationPositiveCoefficients
type: function
namespace: microsoft.quantum.preparation
summary: >-
  Gibt einen Vorgang zur端ck, der den gegebenen Quantum-Zustand vorbereitet.


  Der zur端ckgegebene Vorgang $U $ bereitet einen beliebigen Quantum-Status $ \ket{\psi} $ mit positiven Koeffizienten $ \ alpha_j \ge $0 aus dem $n $-Qubit-Berechnungsbasis Status $ \ket{0...0} $ vor.


  Die Aktion "U" f端r ein neu zugeordneter Register wird durch "$ $ \begin{align} U \ket{0\cdots 0} = \ket{\psi} = \bruchteil {" angegeben. \ sum_ {j = 0} ^ {2 ^ n-1} \ alpha_j \ket{j}}{\sqrt{\ sum_ {j = 0} ^ {2 ^ n-1} | \ alpha_j | ^ 2}}.

  \end{align} $ $
remarks: Negative Eingabe Koeffizienten $ \ alpha_j < $0 werden als positiv mit dem Wert $ | \ alpha_j | $ behandelt. `coefficients` wird mit Elementen $ \ alpha_j = $0,0 aufgef端llt, wenn weniger als $2 ^ n $ angegeben werden.
examples: >-
  Im folgenden Code Ausschnitt wird der Quantum-Status $ \ket{\psi} = \ sqrt {1/8} \ Ket {0} + \ sqrt {7/8} \ Ket {2} $ im Qubit-Register vorbereitet `qubitsLE` .


  ```qsharp

  let amplitudes = [Sqrt(0.125), 0.0, Sqrt(0.875), 0.0];

  let op = StatePreparationPositiveCoefficients(amplitudes);

  using (qubits = Qubit[2]) {
      let qubitsLE = LittleEndian(qubits);
      op(qubitsLE);
  }

  ```
syntax: 'function StatePreparationPositiveCoefficients (coefficients : Double[]) : (Microsoft.Quantum.Arithmetic.LittleEndian => Unit is Adj + Ctl)'
input:
  content: '(coefficients : Double[])'
  types:
  - name: coefficients
    summary: Array von bis zu $2 ^ n $ Koeffizienten $ \ alpha_j $. Der $j $ Th-Koeffizienten indiziert den im Little-Endian-Format codierten Zahlen Status $ \ket{j} $.
    isArray: true
    isPrimitive: true
    uid: Double
output:
  content: (Microsoft.Quantum.Arithmetic.LittleEndian => Unit is Adj + Ctl)
  types:
  - summary: Eine einheitliche Zustands Vorbereitungs Operation $U $.
    isOperation: true
    input:
      types:
      - uid: microsoft.quantum.arithmetic.littleendian
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
metadata:
  ms.openlocfilehash: 7f801c02044195aa2b85bf6fd941923cf474a36b
  ms.sourcegitcommit: d6ac6f4345be0dd68f1bcd944f44b08e7a3cf346
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 09/02/2020
  ms.locfileid: "89331227"

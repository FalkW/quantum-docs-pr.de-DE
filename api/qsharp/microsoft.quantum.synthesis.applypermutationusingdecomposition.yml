### YamlMime:QSharpType
uid: microsoft.quantum.synthesis.applypermutationusingdecomposition
name: ApplyPermutationUsingDecomposition
type: operation
namespace: Microsoft.Quantum.Synthesis
summary: >-
  Pertrauert die Verstärkung in einem Quantum-Zustand, wenn eine permutations mithilfe der Zerlegungs basierten Synthese verwendet wird.


  Mit dieser Prozedur wird der Ansatz der Zerlegungs basierten Synthese implementiert.  Die Eingabe ist eine permutations $ \pi $ over $2 ^ n $ Elements $ \{ 0, \dots, 2 ^ n-1 \} $, was eine $n $-Variable umkehrbare boolesche Funktion darstellt.

  Der Algorithmus führt iterativ die folgenden Schritte für jeden Variablen Index aus $i $:


  1. Compute $ ((\ pi_l, \ pi_r), \pi ') $ so, dass die Bilder von $ \ pi_l $ und $ \ pi_r $ keine Bits in ihren Elementen in anderen Indizes als $i $ und Bilder von $ \pi ' $ do not Change Bit $i $ in ihren Elementen ändern.

  2. Legen Sie $ \pi \leftpfeil \pi ' $, und leiten Sie Wahrheitstabellen aus $ \ pi_l $ und $ \ pi_r $ auf der Grundlage von Elementen, die keine Festpunkte sind, ab.


  Nachdem Sie diese Schritte für alle Variablen Indizes ausgeführt haben, ist die verbleibende permutations $ \pi $ die Identität. basierend auf den gesammelten Wahrheitstabellen und-Indizes kann eine durch Wahrheitstabelle kontrollierte @"microsoft.quantum.intrinsic.x" Vorgänge mithilfe des-Vorgangs angewendet werden @"microsoft.quantum.synthesis.applyxcontrolledontruthtable" .


  Die Reihenfolge der Variablen ist $0, \dots, n-$1.  Eine benutzerdefinierte Reihenfolge der Variablen kann im Vorgang angegeben werden @"microsoft.quantum.synthesis.applypermutationusingdecompositionwithvariableorder" .
examples: >-
  So können Sie einen `SWAP` Vorgang synthetisieren:


  ```Q#

  using (qubits = Qubit[2]) {
    ApplyPermutationUsingDecomposition([0, 2, 1, 3], LittleEndian(qubits));
  }

  ```
syntax: 'operation ApplyPermutationUsingDecomposition (perm : Int[], qubits : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
references: >-
  - [*Alexis de Vos*, *Yvan Van Rentergem*, ADV. in Mathematik. von comm. 2 (2), 2008, pp. 183--200](http://www.aimsciences.org/article/doi/10.3934/amc.2008.2.183)

  - [*Mathias soeken*, *Laura tague*, *Gerhard W. Dueck*, *Rolf Drechsler*, Journal der symbolischen Berechnung 73 (2016), pp. 1--26](https://www.sciencedirect.com/science/article/pii/S0747717115000188?via%3Dihub)
input:
  content: '(perm : Int[], qubits : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: perm
    summary: Eine permutations von $2 ^ n $ Elementen, beginnend bei 0.
    isArray: true
    isPrimitive: true
    uid: Int
  - name: qubits
    summary: Eine Liste von $n $ Qubits, auf die die permutations angewendet wird.
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
seeAlso:
- microsoft.quantum.synthesis.applypermutationusingdecompositionwithvariableorder
- microsoft.quantum.synthesis.applypermutationusingtransformation
metadata:
  ms.openlocfilehash: 2394b1260a848e590bea911e5b52d0e37d8c1bac
  ms.sourcegitcommit: a3775921db1dc5c653c97b8fa8fe2c0ddd5261ff
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 07/02/2020
  ms.locfileid: "85886594"

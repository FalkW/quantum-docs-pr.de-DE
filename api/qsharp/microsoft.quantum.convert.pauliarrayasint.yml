### YamlMime:QSharpType
uid: microsoft.quantum.convert.pauliarrayasint
name: PauliArrayAsInt
type: function
namespace: Microsoft.Quantum.Convert
summary: Codiert einen multiqubit-Pauli-Operator, der als Array von Single-Qubit-Pauli-Operatoren dargestellt wird, in eine ganze Zahl.
remarks: >-
  Jeder Pauli-Operator kann mit zwei Bits codiert werden: $ $ \begin{align} \boldone \mapsto 00, \quad X \mapsto 01, \quad Y \mapsto 11, \quad Z \mapsto 10.

  \end{align} $ $


  Bei einem Array von Pauli- `[P0, ..., Pn]`Operatoren gibt diese Funktion eine ganze Zahl mit binärer Erweiterung zurück, die durch Verkettung der Zuordnungen der einzelnen Pauli-Operatoren `bits(Pn) ... bits(P0)`in Big-Endian-Reihenfolge gebildet wird.
syntax: 'function PauliArrayAsInt (paulis : Pauli[]) : Int'
input:
  content: '(paulis : Pauli[])'
  types:
  - name: paulis
    summary: Ein Array mit höchstens 31 Single-Qubit-Pauli-Operatoren.
    isArray: true
    isPrimitive: true
    uid: Pauli
output:
  content: Int
  types:
  - summary: Eine Ganzzahl, `paulis`die eindeutig identifiziert, wie unten beschrieben.
    isPrimitive: true
    uid: Int
metadata:
  ms.openlocfilehash: 170218ccf1ec4ee1183a7a69ff1e0969f595cac4
  ms.sourcegitcommit: db23885adb7ff76cbf8bd1160d401a4f0471e549
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 05/01/2020
  ms.locfileid: "82677395"

### YamlMime:QSharpType
uid: microsoft.quantum.convert.pauliarrayasint
name: PauliArrayAsInt
type: function
namespace: microsoft.quantum.convert
summary: Codiert einen multiqubit-Pauli-Operator, der als Array von Single-Qubit-Pauli-Operatoren dargestellt wird, in eine ganze Zahl.
remarks: >-
  Jeder Pauli-Operator kann mit zwei Bits codiert werden: $ $ \begin{align} \boldone \mapsto 00, \quad X \mapsto 01, \quad Y \mapsto 11, \quad Z \mapsto 10.

  \end{align} $ $


  Bei einem Array von Pauli-Operatoren `[P0, ..., Pn]` gibt diese Funktion eine ganze Zahl mit binärer Erweiterung zurück, die durch Verkettung der Zuordnungen der einzelnen Pauli-Operatoren in Big-Endian-Reihenfolge gebildet wird `bits(Pn) ... bits(P0)` .
syntax: 'function PauliArrayAsInt (paulis : Pauli[]) : Int'
input:
  content: '(paulis : Pauli[])'
  types:
  - name: paulis
    summary: Ein Array mit höchstens 31 Single-Qubit-Pauli-Operatoren.
    isArray: true
    isPrimitive: true
    uid: Pauli
output:
  content: Int
  types:
  - summary: Eine Ganzzahl, die eindeutig identifiziert `paulis` , wie unten beschrieben.
    isPrimitive: true
    uid: Int
metadata:
  ms.openlocfilehash: e0ec584f77489d019a501ff31074e730152218f7
  ms.sourcegitcommit: d6ac6f4345be0dd68f1bcd944f44b08e7a3cf346
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 09/02/2020
  ms.locfileid: "89338291"

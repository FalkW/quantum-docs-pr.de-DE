### YamlMime:QSharpType
uid: microsoft.quantum.canon.bound
name: Bound
type: function
namespace: microsoft.quantum.canon
summary: Bei einem Array von Vorgängen, die für eine einzelne Eingabe agieren, erzeugt einen neuen Vorgang, der jeden gegebenen Vorgang nacheinander ausführt.
examples: >-
  Die folgenden sind gleichwertig:


  ```qsharp

  let bound = Bound([U, V]);

  bound(x);

  ```


  and


  ```qsharp

  U(x); V(x);

  ```
syntax: "function Bound (operations : ('T => Unit)[]) : ('T => Unit)"
input:
  content: "(operations : ('T => Unit)[])"
  types:
  - name: operations
    summary: Eine Sequenz von Vorgängen, die für eine angegebene Eingabe ausgeführt werden soll.
    isArray: true
    isOperation: true
    input:
      types:
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
output:
  content: ('T => Unit)
  types:
  - summary: Ein neuer Vorgang, der jeden gegebenen Vorgang nacheinander für seine Eingabe ausführt.
    isOperation: true
    input:
      types:
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
typeParameters:
- uid: "'T"
  summary: Das Ziel, auf dem die einzelnen Vorgänge im Array agieren.
seeAlso:
- microsoft.quantum.canon.boundc
- microsoft.quantum.canon.bounda
- microsoft.quantum.canon.boundca
metadata:
  ms.openlocfilehash: 26839c4ab4c7cfaefff5236af5ef923ae13e5773
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91472288"

### YamlMime:QSharpType
uid: microsoft.quantum.canon.controlledonbitstring
name: ControlledOnBitString
type: function
namespace: Microsoft.Quantum.Canon
summary: >-
  Gibt einen einheitlichen Vorgang zurück, der ein Oracle auf das Ziel Register anwendet, wenn der Steuerelement Registrierungs Zustand einer angegebenen Bitmaske entspricht.


  Die Ausgabe dieser Funktion ist ein Vorgang, der durch eine einheitliche Transformation $U $ dargestellt werden kann, sodass \begin{align} U \ket{b_0 B_1 \cdots b_ {n-1}} \ket{\psi} = \ket{b_0 B_1 \cdots b_ {n-1}} \otimes \begin{Cases} V \ket{\psi} & \textrm{if} (b_0 B_1 \cdots b_ {n-1}) = \texttt{Bits} \\ \\ \ket{\psi} & \textrm{otherwits} \end{Cases}, \end{align}, wobei $V $ eine einheitliche Transformation ist, die die Aktion des `oracle` Vorgangs darstellt.
remarks: >-
  Die Länge von `bits` und `controlRegister` muss gleich sein.


  Bei einem booleschen Array `bits` und einem einheitlichen Vorgang `oracle`ist die Ausgabe dieser Funktion ein Vorgang, der die folgenden Schritte ausführt:


  * wenden Sie `X` einen Vorgang auf jedes Qubit des Steuer `false` Element Registrierungs Elements an, das dem `bits`-Element von entspricht.

  * auf `Controlled oracle` das Steuerelement und die Ziel Register anwenden;

  * wenden Sie `X` einen Vorgang auf jedes Qubit des Steuer `false` Element Registrierungs Elements an, das dem `bits` -Element des-Elements entspricht, um das Steuerelement in den ursprünglichen Zustand zurückzukehren.


  Die `Controlled` Ausgabe des funktors ist ein `ControlledOnBitString` Sonderfall von, `bits` `[true, ..., true]`wobei gleich ist.
examples: >-
  Die folgenden Code Ausschnitte sind gleichwertig:


  ```qsharp

  (ControlledOnBitString(bits, oracle))(controlRegister, targetRegister);

  ```


  and


  ```qsharp

  within {
      ApplyPauliFromBitString(PauliX, false, bits, controlRegister);
  } apply {
      Controlled oracle(controlRegister, targetRegister);
  }

  ```


  Der folgende Code bereitet den Status $ \frac{1}{2}(\ket{00} -\ket{01} + \ket{10} + \ket{11}) $:


  ```qsharp

  using (register = Qubit[2]) {
      ApplyToEach(H, register);
      (ControlledOnBitString([false], Z))(register[0..0], register[1]);
  }

  ```
syntax: "function ControlledOnBitString (bits : Bool[], oracle : ('T => Unit is Adj + Ctl)) : ((Qubit[], 'T) => Unit is Adj + Ctl)"
input:
  content: "(bits : Bool[], oracle : ('T => Unit is Adj + Ctl))"
  types:
  - name: bits
    summary: Die Bitzeichenfolge, für die der angegebene einheitliche Vorgang gesteuert werden soll.
    isArray: true
    isPrimitive: true
    uid: Bool
  - name: oracle
    summary: Der auf das Ziel Register anzuwendende einheitliche Vorgang.
    isOperation: true
    input:
      types:
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
output:
  content: ((Qubit[], 'T) => Unit is Adj + Ctl)
  types:
  - summary: Ein einheitlicher Vorgang, der `oracle` für das Ziel Register gilt, wenn der Steuerelement Registrierungs Zustand der Bitmaske `bits`entspricht.
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
metadata:
  ms.openlocfilehash: d5a6223c130150f42f83044aec19b1d5a875bb1d
  ms.sourcegitcommit: db23885adb7ff76cbf8bd1160d401a4f0471e549
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 05/01/2020
  ms.locfileid: "82680353"

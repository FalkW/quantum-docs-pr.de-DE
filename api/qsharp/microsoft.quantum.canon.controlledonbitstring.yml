### YamlMime:QSharpType
uid: microsoft.quantum.canon.controlledonbitstring
name: ControlledOnBitString
type: function
namespace: Microsoft.Quantum.Canon
summary: >-
  Gibt einen einheitlichen Vorgang zurück, der ein Oracle auf das Ziel Register anwendet, wenn der Steuerelement Registrierungs Zustand einer angegebenen Bitmaske entspricht.


  Die Ausgabe dieser Funktion ist ein Vorgang, der durch eine einheitliche Transformation $U $ dargestellt werden kann, sodass \begin{align} U \ket{b_0 B_1 \cdots b_ {n-1}} \ket{\psi} = \ket{b_0 B_1 \cdots b_ {n-1}} \otimes \begin{Cases} V \ket{\psi} & \textrm{if} (b_0 B_1 \cdots b_ {n-1}) = \texttt{Bits} \\\\ \ket{\psi} & \textrm{otherwits} \end{Cases}, \end{align}, wobei $V $ eine einheitliche Transformation ist, die die Aktion des `oracle` Vorgangs darstellt.
remarks: >-
  Die Länge von `bits` und `controlRegister` muss gleich sein.


  Wenn ein boolesches Array `bits` und ein einheitlicher Vorgang `oracle`, ist die Ausgabe dieser Funktion ein Vorgang, der die folgenden Schritte ausführt:


  * wenden Sie einen `X` Vorgang auf jedes Qubit des Steuerelement Registers an, das `false` Element der `bits`entspricht.

  * Anwenden von `Controlled oracle` auf das Steuerelement und die Ziel Register

  * wenden Sie einen `X` Vorgang auf jedes Qubit des Steuerelement Registrierungs Elements an, das `false` Element des `bits` entspricht, um das Steuerelement in den ursprünglichen Zustand zurückzukehren.


  Die Ausgabe des funktors `Controlled` ist ein Sonderfall von `ControlledOnBitString`, bei dem `bits` gleich `[true, ..., true]`ist.
examples: >-
  Die folgenden Code Ausschnitte sind gleichwertig:


  ```qsharp

  (ControlledOnBitString(bits, oracle))(controlRegister, targetRegister);

  ```


  and


  ```qsharp

  within {
      ApplyPauliFromBitString(PauliX, false, bits, controlRegister);
  } apply {
      Controlled oracle(controlRegister, targetRegister);
  }

  ```


  Der folgende Code bereitet den Status $ \frac{1}{2}(\ket{00}-\ket{01} + \ket{10} + \ket{11}) $:


  ```qsharp

  using (register = Qubit[2]) {
      ApplyToEach(H, register);
      (ControlledOnBitString([false], Z))(register[0..0], register[1]);
  }

  ```
syntax: "function ControlledOnBitString (bits : Bool[], oracle : ('T => Unit is Adj + Ctl)) : ((Qubit[], 'T) => Unit is Adj + Ctl)"
input:
  content: "(bits : Bool[], oracle : ('T => Unit is Adj + Ctl))"
  types:
  - name: bits
    summary: Die Bitzeichenfolge, für die der angegebene einheitliche Vorgang gesteuert werden soll.
    isArray: true
    isPrimitive: true
    uid: Bool
  - name: oracle
    summary: Der auf das Ziel Register anzuwendende einheitliche Vorgang.
    isOperation: true
    input:
      types:
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
output:
  content: ((Qubit[], 'T) => Unit is Adj + Ctl)
  types:
  - summary: Ein einheitlicher Vorgang, der `oracle` auf das Ziel Register anwendet, wenn der Steuerelement Registrierungs Zustand der Bitmaske `bits`entspricht.
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
metadata:
  ms.openlocfilehash: e6f7f8980b2b9b8305df12da41e30fc563e54ad1
  ms.sourcegitcommit: 6ccea4a2006a47569c4e2c2cb37001e132f17476
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 02/28/2020
  ms.locfileid: "77906524"

### YamlMime:QSharpType
uid: microsoft.quantum.canon.decomposedintotimestepsca
name: DecomposedIntoTimeStepsCA
type: function
namespace: Microsoft.Quantum.Canon
summary: Gibt einen Vorgang zurück, der den Trotter – Suzuki Integrator für einen angegebenen Vorgang implementiert.
remarks: >-
  Bei einem Aufruf mit `order` gleich `1`, gibt diese Funktion einen Vorgang zurück, der durch die niedrigste Reihenfolge des Trotters simuliert werden kann – Suzuki Integrator $ $ \begin{align} S_1 (\lambda) = \ prod_ {j = 1} ^ {m} e ^ {H_j \lambda}, \end{align} $ $, wobei die Notation von [quant-ph/0508139](https://arxiv.org/abs/quant-ph/0508139) befolgt wurde und $ \lambda $ die Entwicklungszeit (dargestellt durch die erste Eingabe der zurückgegebenen Operation), und lassen Sie $\{H_j\}_ {j = 1} ^ {m} $ den Satz der (Schiefe-hermitian) Dynamical-Generatoren aufweisen, die integriert werden. Diese `op(j, lambda, _)` wird vom einheitlichen Operator $e ^ {H_j \lambda} $ simuliert.


  Ebenso gilt: eine `order` `2` gibt den symmetrischen Trotter der zweiten Ordnung zurück – Suzuki Integrator $ $ \begin{align} S_2 (\lambda) = \ prod_ {j = 1} ^ {m} e ^ {H_k \lambda/2} \ prod_ {j ' = m} ^{1} e ^ {H_ {j '} \lambda/2}.

  \end{align} $ $


  Höhere auch Werte von `order` werden mithilfe der rekursiven Konstruktion von [quant-ph/0508139](https://arxiv.org/abs/quant-ph/0508139)implementiert.
syntax: "function DecomposedIntoTimeStepsCA ((nSteps : Int, op : ((Int, Double, 'T) => Unit is Adj + Ctl)), trotterOrder : Int) : ((Double, 'T) => Unit is Adj + Ctl)"
references: '- [*D. W. Beeren, G. ahukas, R. Cleve, B. C. Sanders*](https://arxiv.org/abs/quant-ph/0508139)'
input:
  content: "((nSteps : Int, op : ((Int, Double, 'T) => Unit is Adj + Ctl)), trotterOrder : Int)"
  types:
  - name: nSteps
    summary: Die Anzahl der Vorgänge, die in Zeitschritten zerlegt werden sollen.
    isPrimitive: true
    uid: Int
  - name: op
    summary: Ein Vorgang, bei dem eine Index Eingabe (Type `Int`) und eine Zeiteingabe (Typ `Double`) für die Zerlegung akzeptiert werden.
    isOperation: true
    input:
      types:
      - isPrimitive: true
        uid: Int
      - isPrimitive: true
        uid: Double
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
  - name: trotterOrder
    summary: >-
      Wählt die Reihenfolge des zu verwendenden Trotter – Suzuki Integrator aus.

      Bestellung 1 und sogar Orders 2, 4, 6,... werden zurzeit unterstützt.
    isPrimitive: true
    uid: Int
output:
  content: ((Double, 'T) => Unit is Adj + Ctl)
  types:
  - summary: Gibt eine einheitliche-Klasse zurück, die den Trotter – Suzuki Integrator implementiert, wobei der erste Parameter `Double` die Größe der Integrationsschritte ist und der zweite Parameter das Ziel ist.
    isOperation: true
    input:
      types:
      - isPrimitive: true
        uid: Double
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
typeParameters:
- uid: "'T"
  summary: Der Typ, auf den jeder Zeit Schritt reagieren soll. in der Regel werden entweder `Qubit[]` oder `Qubit`.
metadata:
  ms.openlocfilehash: 66b2d7ca6394f525e8ec0dcb3516776bf91bd0cb
  ms.sourcegitcommit: ca5015fed409eaf0395a89c2e4bc6a890c360aa2
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 01/29/2020
  ms.locfileid: "76873021"

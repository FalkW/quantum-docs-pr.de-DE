### YamlMime:QSharpNamespace
functions:
- summary: Fügt zwei `GeneratorSystem` s hinzu, um einen neuen zu erstellen `GeneratorSystem` .
  uid: Microsoft.Quantum.Simulation.AddGeneratorSystems
- summary: >-
    Codiert einen relevanten Operator in eine `BlockEncoding` .

    Dadurch wird ein `BlockEncoding` einheitlicher $U = p\cdot v\cdot P ^ \dagger $ erstellt, der einen Operator $H = \ sum_ {j} | \ alpha_j codiert | U_j $ von Interesse, bei dem es sich um eine lineare Kombination von uniflüssen handelt. In der Regel ist $P $ eine einheitliche Zustands Vorbereitung, z. b. $P \ket {0} \_ a = \ sum_j \sqrt{\ alpha_j/ \| \vec\alpha \| \_ 2} \ket{j} \_ a $ und $V = \ sum_ {j} \ket{j}\bra{j} \_ a\otimes U_j $.
  uid: Microsoft.Quantum.Simulation.BlockEncodingByLCU
- summary: >-
    Codiert einen relevanten Operator in eine `BlockEncodingReflection` .

    Dadurch wird ein `BlockEncodingReflection` einheitlicher $U = p\cdot v\cdot P ^ \dagger $ erstellt, der einen Operator $H = \ sum_ {j} | \ alpha_j codiert | U_j $ von Interesse, bei dem es sich um eine lineare Kombination von uniflüssen handelt. In der Regel ist $P $ eine einheitliche Zustands Vorbereitung, z {0} \_ . b. $P \ket a \ sum_j \sqrt{\ alpha_j/ \| \vec\alpha \| \_ 2} \ket{j} \_ a $ und $V = \ sum_ {j} \ket{j}\bra{j} \_ a\otimes U_j $.
  uid: Microsoft.Quantum.Simulation.BlockEncodingReflectionByLCU
- summary: >-
    Konvertiert einen `BlockEncoding` in eine-Entsprechung `BLockEncodingReflection` .

    Das heißt, bei einem `BlockEncoding` einheitlichen $U $, der einen Operator $H $ of Interest codiert, konvertiert ihn in eine `BlockEncodingReflection` $U ' $, die denselben Operator codiert, aber auch $U ' ^ \dagger = U ' $ entspricht. Dadurch wird die Größe des zusätzlichen Registers $U $ um ein Qubit vergrößert.
  uid: Microsoft.Quantum.Simulation.BlockEncodingToReflection
- summary: Ruft die- `GeneratorIndex` Funktion in einem ab `GeneratorSystem` .
  uid: Microsoft.Quantum.Simulation.GetGeneratorSystemFunction
- summary: Ruft die Anzahl der Begriffe in einem ab `GeneratorSystem` .
  uid: Microsoft.Quantum.Simulation.GetGeneratorSystemNTerms
- summary: Gibt einen Generator Index zurück, der mit der NULL hamiltonan übereinstimmt, `H = 0` die dem Vorgang zur Identitätsentwicklung entspricht.
  uid: Microsoft.Quantum.Simulation.IdentityGeneratorIndex
- summary: Gibt ein Generator System zurück, das mit der NULL hamiltonan übereinstimmt `H = 0` , die dem Vorgang zur Identitätsentwicklung entspricht.
  uid: Microsoft.Quantum.Simulation.IdentityGeneratorSystem
- summary: Gibt ein Zeit abhängiges Generator System zurück, das mit der hamiltonan konsistent ist `H(s) = 0` .
  uid: Microsoft.Quantum.Simulation.IdentityTimeDependentGeneratorSystem
- summary: Wird in der Implementierung von `PauliBlockEncoding`
  uid: Microsoft.Quantum.Simulation.IdxToCoeff
- summary: Wird in der Implementierung von `PauliBlockEncoding`
  uid: Microsoft.Quantum.Simulation.IdxToUnitary
- summary: Konvertiert eine ganze Zahl in einen Single-Qubit-Pauli-Operator.
  uid: Microsoft.Quantum.Simulation.IntToPauli
- summary: Gibt einen zurück, `TimeDependentGeneratorSystem` der die lineare interpolung zwischen zwei `GeneratorSystem` n darstellt.
  uid: Microsoft.Quantum.Simulation.InterpolateGeneratorSystems
- summary: Linearly interpoliert zwischen zwei `GeneratorSystems` gemäß einem Zeit Plan Parameter `s` zwischen 0 und 1 (einschließlich).
  uid: Microsoft.Quantum.Simulation.InterpolateGeneratorSystemsImpl
- summary: Interpoliert zwischen zwei Generatoren mit einem einheitlichen Zeitplan und gibt einen Vorgang zurück, der die simulierte Weiterentwicklung unter dem resultierenden zeitabhängigen Generator auf ein Qubit-Register anwendet.
  uid: Microsoft.Quantum.Simulation.InterpolatedEvolution
- summary: Konvertiert ein Array von ganzen Zahlen in ein Array von Single-Qubit-Pauli-Operatoren.
  uid: Microsoft.Quantum.Simulation.IntsToPaulis
- summary: Multipliziert den Koeffizienten in einer `GeneratorIndex` .
  uid: Microsoft.Quantum.Simulation.MultiplyGeneratorIndex
- summary: Multipliziert den Koeffizient aller Begriffe in einem `GeneratorSystem` .
  uid: Microsoft.Quantum.Simulation.MultiplyGeneratorSystem
- summary: >-
    Erstellt eine einheitliche Block Codierung für ein hamiltonan.

    Die hamiltonan $H = \ sum_ {j} \ alpha_j P_j $ wird durch eine Summe von Pauli-Begriffen $P _J $, jeweils mit dem tatsächlichen Koeffizienten $ \ alpha_j $, beschrieben.
  uid: Microsoft.Quantum.Simulation.PauliBlockEncoding
- summary: Extrahiert den Koeffizient eines Pauli-Begriffs, der von einem beschrieben wird `GeneratorIndex` .
  uid: Microsoft.Quantum.Simulation.PauliCoefficientFromGenIdx
- summary: Stellt einen dynamischen Generator als Satz von simulsierbaren Gates und eine Erweiterung in der Pauli-Basis dar.
  uid: Microsoft.Quantum.Simulation.PauliEvolutionFunction
- summary: Stellt einen dynamischen Generator als Satz von simulsierbaren Gates und eine Erweiterung in der Pauli-Basis dar.
  uid: Microsoft.Quantum.Simulation.PauliEvolutionSet
- summary: Wird in der Implementierung von `PauliBlockEncoding`
  uid: Microsoft.Quantum.Simulation.PauliLCUUnitary
- summary: Extrahiert die Pauli-Zeichenfolge und ihre Qubit-Indizes eines von einem beschriebenen Pauli-Begriffs `GeneratorIndex` .
  uid: Microsoft.Quantum.Simulation.PauliStringFromGenIdx
- summary: Konvertiert eine Block Codierungs Reflektion in einen Quantum Walk.
  uid: Microsoft.Quantum.Simulation.QuantumWalkByQubitization
- summary: Fügt mehrere `GeneratorSystem` s hinzu, um ein neues Generatorsystem zu erstellen.
  uid: Microsoft.Quantum.Simulation.SumGeneratorSystems
- summary: '`TimeDependentSimulationAlgorithm` eine Funktion, die eine Trotter – Suzuki-Zerlegung verwendet, um einen einheitlichen Operator zu nähern, der die zeitabhängige Schrodinger-Gleichung löst.'
  uid: Microsoft.Quantum.Simulation.TimeDependentTrotterSimulationAlgorithm
- summary: '`SimulationAlgorithm` eine Funktion, die eine Trotter – Suzuki-Zerlegung verwendet, um den Time-Evolution Operator _Exp (-IHT)_ zu annähern.'
  uid: Microsoft.Quantum.Simulation.TrotterSimulationAlgorithm
- summary: Implementiert einen einzelnen Zeit Schritt der Zeitentwicklung durch das in einer `EvolutionGenerator` mithilfe einer Trotter – Suzuki-Zerlegung beschriebene System.
  uid: Microsoft.Quantum.Simulation.TrotterStep
- summary: Fügt zwei `GeneratorSystem` s hinzu, um einen neuen zu erstellen `GeneratorSystem` .
  uid: Microsoft.Quantum.Simulation._AddGeneratorSystems
- summary: Gibt ein mit der hamiltonan konsistentes Generator System zurück `H(s) = 0` , wobei `s` ein Zeit Plan Parameter ist.
  uid: Microsoft.Quantum.Simulation._IdentityTimeDependentGeneratorSystem
- summary: Multipliziert den Koeffizient aller Begriffe in einem `GeneratorSystem` .
  uid: Microsoft.Quantum.Simulation._MultiplyGeneratorSystem
- summary: >-
    Erstellt eine einheitliche Block Codierung für ein hamiltonan.

    Die hamiltonan $H = \ sum_ {j} \ alpha_j P_j $ wird durch eine Summe von Pauli-Begriffen $P _J $, jeweils mit dem tatsächlichen Koeffizienten $ \ alpha_j $, beschrieben.
  uid: Microsoft.Quantum.Simulation._PauliBlockEncoding
name: Microsoft.Quantum.Simulation
newtypes:
- summary: >-
    Stellt eine einheitliche dar, bei der ein beliebiger Operator von Interesse im oberen linken Block codiert wird.

    Das heißt, ein `BlockEncoding` ist ein einheitlicher $U $, bei dem ein beliebiger Operator $H $ of Interest, der für das System Register agiert, `s` in dem Block oben links codiert wird, der dem hilfstatus $ \ket {0} _A $ entspricht. Das heißt: $ $ \begin{align} (\bra {0} _A \otimes I_s) U (\ket {0} _A \otimes I_s) = H \end{align} $ $.
  uid: Microsoft.Quantum.Simulation.BlockEncoding
- summary: Stellt einen dar `BlockEncoding` , der auch eine Reflektion ist.
  uid: Microsoft.Quantum.Simulation.BlockEncodingReflection
- summary: >-
    Stellt einen dynamischen Generator als Satz von simulier baren Gates und eine Erweiterung in Bezug auf diese Grundlage dar.

    Der letzte Parameter für die Anzahl von Begriffen.
  uid: Microsoft.Quantum.Simulation.EvolutionGenerator
- summary: >-
    Stellt einen zeitabhängigen Dynamical-Generator dar.

    Der- `Double` Parameter ist ein Zeitplan in $ [0,0] $.
  uid: Microsoft.Quantum.Simulation.EvolutionSchedule
- summary: >-
    Stellt einen Satz von Gates dar, der leicht implementiert und zum Implementieren von Simulations Algorithmen verwendet werden kann.

    Elemente in der Menge werden von einem indiziert  <xref:microsoft.quantum.simulation.generatorindex> , und jeder Satz wird von einer Funktion von `GeneratorIndex` bis beschrieben  <xref:microsoft.quantum.simulation.evolutionunitary> , die Vorgänge parametrisiert durch eine reelle Zahl, die die Zeit darstellt
  uid: Microsoft.Quantum.Simulation.EvolutionSet
- summary: >-
    Stellt einen einheitlichen Time-Evolution-Operator dar.

    Der erste Parameter ist die Dauer der Zeit-Evolution, und der zweite Parameter ist das Qubit-Register, auf das durch die einheitliche-Aktion reagiert wird.
  uid: Microsoft.Quantum.Simulation.EvolutionUnitary
- summary: >-
    Stellt einen einzelnen primitiven Begriff in der Menge aller dynamischen Generatoren dar, z. b. "hermitian"-Operatoren, für die eine Zuordnung von diesem Generator zur Zeit Weiterentwicklung durch diesen Generator vorhanden ist `EvolutionSet` .

    Beim ersten Element (int [], Double []) handelt es sich um Indizes, die einen einzelnen Begriff aufweisen. beispielsweise wird die Pauli-Zeichenfolge XXY mit Koeffizient 0,5 von ([1, 1, 2], [0,5]) indiziert. Alternativ kann hamiltonane, die durch eine kontinuierliche Variable, wie z. b. X cos und Y Sin, parametrisiert werden, z. b. durch ([], [ge]) dargestellt werden. Das zweite Element indiziert das Subsystem, auf dem der Generator agiert.
  uid: Microsoft.Quantum.Simulation.GeneratorIndex
- summary: >-
    Stellt eine Auflistung von `GeneratorIndex` es dar.

    Wir durchlaufen diese Auflistung mit einer Einzel Index-Ganzzahl, und es wird davon ausgegangen, dass die Größe der Auflistung bekannt ist.
  uid: Microsoft.Quantum.Simulation.GeneratorSystem
- summary: >-
    Stellt einen zeitunabhängigen Simulations Algorithmus dar.

    Eine zeitunabhängige Simulationstechnik konvertiert einen <xref:microsoft.quantum.simulation.evolutiongenerator> für einige Zeitintervalle in eine einheitliche Zeitentwicklung.
  uid: Microsoft.Quantum.Simulation.SimulationAlgorithm
- summary: >-
    Stellt eine dar `BlockEncoding` , die von einem Uhren Register gesteuert wird.

    Das heißt, ein `TimeDependentBlockEncoding` ist ein einheitlicher $U $, der durch den Status $ \ket{k} _d $ in der Uhr registriert wird `d` , sodass ein beliebiger Operator $H _K von Interest, der für das System Register agiert, `s` in dem Block oben links codiert wird, der dem hilfstatus $ \ket {0} _a $ entspricht. Das heißt: $ $ \begin{align} (\bra {0} \_ a\otimes i_ {DS}) U (\ket {0} \_ a\otimes i_ {DS}) = \ sum_ {k} \ket{k}\bra{k} \_ d\otimes H_k. \end{align} $ $.
  uid: Microsoft.Quantum.Simulation.TimeDependentBlockEncoding
- summary: Stellt einen zeitabhängigen dynamikalischen Generator als Funktion von Time bis zum Wert des dynamischen Generators zu diesem Zeitpunkt dar.
  uid: Microsoft.Quantum.Simulation.TimeDependentGeneratorSystem
- summary: >-
    Stellt einen zeitabhängigen Simulations Algorithmus dar.

    Bei einer zeitabhängigen Simulationstechnik wird ein <xref:microsoft.quantum.simulation.evolutionschedule> für einige Zeitintervalle in eine einheitliche Zeit Evolution konvertiert.
  uid: Microsoft.Quantum.Simulation.TimeDependentSimulationAlgorithm
- summary: Stellt die Weiterentwicklung unter einem einheitlichen Operator dar.
  uid: Microsoft.Quantum.Simulation.Unitary
operations:
- summary: Führt die Zustands Vorbereitung durch Anwenden eines `statePrepUnitary` auf den Eingabe Zustand, gefolgt von der adiabatischen Zustands Vorbereitung mithilfe eines `adiabaticUnitary` und schließlich der Phasen Schätzung in Bezug auf `qpeUnitary` den resultierenden Zustand mithilfe `phaseEstAlgorithm` von aus.
  uid: Microsoft.Quantum.Simulation.AdiabaticStateEnergyUnitary
- summary: Implementierung von `BlockEncodingToReflection`.
  uid: Microsoft.Quantum.Simulation.ApplyBlockEncodingAsReflection
- summary: Implementierung von `BlockEncodingByLCU`.
  uid: Microsoft.Quantum.Simulation.ApplyBlockEncodingByLCU
- summary: Konvertierung von ((littleEndian, Qubit []) => () ist ADJ + CTL) in blockencoding
  uid: Microsoft.Quantum.Simulation.ApplyBlockEncodingFromBEandQubit
- summary: Wird in der Implementierung von `PauliBlockEncoding`
  uid: Microsoft.Quantum.Simulation.ApplyPauliLCUUnitary
- summary: Implementierung von `Qubitization`.
  uid: Microsoft.Quantum.Simulation.ApplyQuantumWalkByQubitization
- summary: Führt die Zustands Vorbereitung durch Anwenden eines `statePrepUnitary` auf eine automatisch zugeordnete Eingabe Zustands-Phasen Schätzung in Bezug auf `qpeUnitary` den resultierenden Zustand mithilfe von aus `phaseEstAlgorithm` .
  uid: Microsoft.Quantum.Simulation.EstimateEnergy
- summary: Führt die Zustands Vorbereitung durch Anwenden eines `statePrepUnitary` auf einen automatisch zugeordneten Eingabe Zustand, gefolgt von der adiabatischen Zustands Vorbereitung mithilfe eines `adiabaticUnitary` und schließlich der Phasen Schätzung in Bezug auf `qpeUnitary` den resultierenden Zustand mithilfe von aus `phaseEstAlgorithm` .
  uid: Microsoft.Quantum.Simulation.EstimateEnergyWithAdiabaticEvolution
- summary: >-
    Stellt einen dynamischen Generator als Satz von simulsierbaren Gates und eine Erweiterung in der Pauli-Basis dar.

    Weitere Informationen finden Sie unter [Dynamical Generator Modeling](/quantum/libraries/data-structures#dynamical-generator-modeling) .
  uid: Microsoft.Quantum.Simulation.PauliEvolutionImpl
- summary: Implementierung mehrerer trockschritte zur Annäherung an einen einheitlichen Operator, der die zeitabhängige Schrödinger-Gleichung löst.
  uid: Microsoft.Quantum.Simulation.TimeDependentTrotterSimulationAlgorithmImpl
- summary: Führt wiederkehrende Aufrufe von aus `TrotterStep` , um den Zeit-Evolution-Operator Exp ( _-IHT_ ) zu nähern.
  uid: Microsoft.Quantum.Simulation.TrotterSimulationAlgorithmImpl
- summary: Implementiert die Zeitentwicklung mit einem in einem enthaltenen Begriff `GeneratorSystem` .
  uid: Microsoft.Quantum.Simulation.TrotterStepImpl
summary: Dieser Namespace enthält Funktionen und Vorgänge, mit denen die Dynamics von Quantum-Systemen einheitlich simuliert werden.
uid: Microsoft.Quantum.Simulation
metadata:
  ms.openlocfilehash: dd1c6fe3baab8788047020bbe3d5dbe2888dec45
  ms.sourcegitcommit: 29e0d88a30e4166fa580132124b0eb57e1f0e986
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 10/27/2020
  ms.locfileid: "92725776"

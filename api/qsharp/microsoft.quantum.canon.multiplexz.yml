### YamlMime:QSharpType
uid: microsoft.quantum.canon.multiplexz
name: MultiplexZ
type: operation
namespace: Microsoft.Quantum.Canon
summary: >-
  Wendet eine Pauli Z-Drehung an, die auf ein Array von Qubits bedingt ist.


  Dadurch wird der multiplizierende einheitliche Vorgang $U $ angewendet, der die Drehung um den Winkel $ \theta_j $ um den Single-Qubit-Pauli-Operator $Z $ durchführt, wenn er vom $n $-Qubit-Zahlen Status $ \ket{j} $ gesteuert wird.


  $U = \sum ^ {2 ^ n-1} _ {j = 0} \ket{j}\bra{j}\otimes e ^ {i Z \theta_j} $.
remarks: '`coefficients` werden mit den Elementen $ \theta_j = $0,0 aufgefüllt, wenn weniger als $2 ^ n $ angegeben werden.'
syntax: 'operation MultiplexZ (coefficients : Double[], control : Microsoft.Quantum.Arithmetic.LittleEndian, target : Qubit) : Unit'
references: '- Synthese von Quantum Logic-Leitungen Vivek V. Shende, Stephen S. Bullock, Igor L. Markov https://arxiv.org/abs/quant-ph/0406176'
input:
  content: '(coefficients : Double[], control : Microsoft.Quantum.Arithmetic.LittleEndian, target : Qubit)'
  types:
  - name: coefficients
    summary: Array von bis zu $2 ^ n $ Koeffizienten $ \theta_j $. Der $j $ Th-Koeffizienten indiziert den im Little-Endian-Format codierten Zahlen Status $ \ket{j} $.
    isArray: true
    isPrimitive: true
    uid: Double
  - name: control
    summary: $n $-Qubit-Steuerelement Register, das die Anzahl der Zustände $ \ket{j} $ im Little-Endian-Format codiert.
    uid: microsoft.quantum.arithmetic.littleendian
  - name: target
    summary: Einzelnes Qubit-Register, das durch $e ^ {i P \theta_j} $ gedreht wird.
    isPrimitive: true
    uid: Qubit
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
ms.openlocfilehash: 7098b849ea730b46b4cc3039520ef2b040d43d34
ms.sourcegitcommit: 8becfb03eb60ba205c670a634ff4daa8071bcd06
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 10/31/2019
ms.locfileid: "73222696"

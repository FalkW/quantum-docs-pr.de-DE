### YamlMime:QSharpType
uid: microsoft.quantum.simulation.quantumwalkbyqubitization
name: QuantumWalkByQubitization
type: function
namespace: Microsoft.Quantum.Simulation
summary: >-
  Konvertiert eine Block Codierungs Reflektion in einen Quantum Walk.


  Wenn ein `BlockEncodingReflection` von einem einheitlichen $U $ repr채sentiert wird, der einen Operator $H $ of Interest codiert, konvertiert ihn in einen Quantum Walk $W $, der das Spektrum von $ \pm e ^ {\pm i\sin ^{-1}(H)} $ enth채lt.
syntax: 'function QuantumWalkByQubitization (blockEncoding : Microsoft.Quantum.Simulation.BlockEncodingReflection) : ((Qubit[], Qubit[]) => Unit is Adj + Ctl)'
references: '- Hamiltona Simulation by qubitisierung Guang Hao Low, ISAL. Chuanghttps://arxiv.org/abs/1610.06546'
input:
  content: '(blockEncoding : Microsoft.Quantum.Simulation.BlockEncodingReflection)'
  types:
  - name: blockEncoding
    uid: microsoft.quantum.simulation.blockencodingreflection
output:
  content: ((Qubit[], Qubit[]) => Unit is Adj + Ctl)
  types:
  - summary: Ein Quantum Walk $W $, das sich zusammen `a` in `s` Registern verh채lt und $H $ codiert und das Spektrum von $ \pm e ^ {\pm i\sin ^{-1}(H)} $ enth채lt.
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
      - isArray: true
        isPrimitive: true
        uid: Qubit
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
seeAlso:
- microsoft.quantum.canon.blockencoding
- microsoft.quantum.canon.blockencodingreflection
metadata:
  ms.openlocfilehash: e2a6c0469b730140b8584e8cff2aad2d68254793
  ms.sourcegitcommit: db23885adb7ff76cbf8bd1160d401a4f0471e549
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 05/01/2020
  ms.locfileid: "82682499"

### YamlMime:QSharpType
uid: microsoft.quantum.simulation.quantumwalkbyqubitization
name: Quantum walkbyqubitisierung
type: function
namespace: Microsoft.Quantum.Simulation
summary: >-
  Konvertiert eine `BlockEncodingReflection` in einen Quantum Walk.


  Das heißt, bei einem `BlockEncodingReflection` einheitlichen $U $, der einen Operator $H $ of Interest codiert, konvertiert ihn in einen Quantum Walk $W $, der das Spektrum von $ \pm e ^ {\pm i\sin ^{-1}(H)} $ enthält.
syntax: 'function QuantumWalkByQubitization (blockEncoding : Microsoft.Quantum.Simulation.BlockEncodingReflection) : ((Qubit[], Qubit[]) => Unit is Adj + Ctl)'
references: >-
  - Hamiltonian Simulation by Qubitization
    Guang Hao Low, Isaac L. Chuang
    https://arxiv.org/abs/1610.06546
input:
  content: '(blockencoding: Microsoft. Quantum. Simulation. blockencodingreflection)'
  types:
  - name: Blockencoding
    uid: microsoft.quantum.simulation.blockencodingreflection
output:
  content: ((Qubit [], Qubit []) = > Einheit ist ADJ + CTL)
  types:
  - summary: Ein Quantum Walk-$W $, das gemeinsam für die Registrierung `a` und `s`, dass $H $ blockiert und das Spektrum von $ \pm e ^ {\pm i\sin ^{-1}(H)} $ enthält.
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
      - isArray: true
        isPrimitive: true
        uid: Qubit
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
seeAlso:
- microsoft.quantum.canon.blockencoding
- microsoft.quantum.canon.blockencodingreflection
ms.openlocfilehash: aec6e81e44d4fa09e2ca131f0350590541f4dc8d
ms.sourcegitcommit: 8becfb03eb60ba205c670a634ff4daa8071bcd06
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 10/30/2019
ms.locfileid: "73065349"

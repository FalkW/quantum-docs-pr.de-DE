### YamlMime:QSharpType
uid: microsoft.quantum.arithmetic.incrementbymodularinteger
name: IncrementByModularInteger
type: operation
namespace: microsoft.quantum.arithmetic
summary: >-
  Führt ein modulares Inkrement für ein Qubit-Register durch eine ganzzahlige Konstante aus.


  Geben Sie `increment` $a $ an, indem Sie `modulus` $N $ und Integer in `target` durch $y $ codiert haben.

  Anschließend führt der Vorgang die folgende Transformation aus: \begin{align} \ket{y} \mapsto \ket{(y + a) \operatschmue{mod} N} \end{align} ganze Zahlen werden im Little-Endian-Format codiert.
remarks: >-
  Geht davon aus, dass der Anfangswert von Target kleiner als $N $ und die Inkrement-$a $ kleiner als $N $ ist.

  Beachten Sie, dass <xref:microsoft.quantum.arithmetic.incrementphasebymodularinteger> denselben Vorgang in der `PhaseLittleEndian` Basis implementiert.
syntax: 'operation IncrementByModularInteger (increment : Int, modulus : Int, target : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
input:
  content: '(increment : Int, modulus : Int, target : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: increment
    summary: Ganzzahliges Inkrement $a $, das $y $ hinzugefügt werden soll.
    isPrimitive: true
    uid: Int
  - name: modulus
    summary: Ganzzahliger $N $, $y + a $.
    isPrimitive: true
    uid: Int
  - name: target
    summary: Ganzzahliger $y $ im `LittleEndian` Format, dem `increment` $a $ hinzugefügt wird.
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
seeAlso:
- microsoft.quantum.arithmetic.incrementphasebymodularinteger
metadata:
  ms.openlocfilehash: 7ea6dde359868fe2b5faf78b478df98de091377f
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91477130"

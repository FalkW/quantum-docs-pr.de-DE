### YamlMime:QSharpType
uid: microsoft.quantum.canon.applypaulifrombitstring
name: ApplyPauliFromBitString
type: operation
namespace: microsoft.quantum.canon
summary: Wendet einen Pauli-Operator auf jedes Qubit in einem Array an, wenn das entsprechende Bit eines booleschen Arrays mit einer angegebenen Eingabe 체bereinstimmt.
remarks: Das boolesche Array und das Quantum-Register m체ssen die gleiche L채nge aufweisen.
syntax: 'operation ApplyPauliFromBitString (pauli : Pauli, bitApply : Bool, bits : Bool[], qubits : Qubit[]) : Unit'
input:
  content: '(pauli : Pauli, bitApply : Bool, bits : Bool[], qubits : Qubit[])'
  types:
  - name: pauli
    summary: Der Pauli-Operator, auf den angewendet wird. `qubits[idx]``bitsApply == bits[idx]`
    isPrimitive: true
    uid: Pauli
  - name: bitApply
    summary: Anwenden von Pauli, wenn Bit dieser Wert ist
    isPrimitive: true
    uid: Bool
  - name: bits
    summary: Boolesches Register, das angibt, welches entsprechende Qubit in `qubits` operiert werden soll
    isArray: true
    isPrimitive: true
    uid: Bool
  - name: qubits
    summary: Das Quantum-Register, f체r das der angegebene Pauli-Operator selektiv angewendet wird.
    isArray: true
    isPrimitive: true
    uid: Qubit
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
metadata:
  ms.openlocfilehash: 7efea4ea34ee1ae68695aa74142ebf6bce93d289
  ms.sourcegitcommit: d6ac6f4345be0dd68f1bcd944f44b08e7a3cf346
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 09/02/2020
  ms.locfileid: "89357968"

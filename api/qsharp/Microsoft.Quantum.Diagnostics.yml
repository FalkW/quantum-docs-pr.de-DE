### YamlMime:QSharpNamespace
uid: microsoft.quantum.diagnostics
name: Microsoft.Quantum.Diagnostics
functions:
- uid: microsoft.quantum.diagnostics.allequalityfactb
  summary: Bestätigt, dass zwei Arrays von booleschen Werten gleich sind.
- uid: microsoft.quantum.diagnostics.dumpmachine
  summary: Sichert den Status des aktuellen Ziel Computers.
- uid: microsoft.quantum.diagnostics.dumpregister
  summary: Sichert den aktuellen Status des Ziel Computers, der mit den angegebenen Qubits verknüpft ist.
- uid: microsoft.quantum.diagnostics.equalityfactb
  summary: Bestätigt, dass eine klassische boolesche Variable über den erwarteten Wert verfügt.
- uid: microsoft.quantum.diagnostics.equalityfactc
  summary: Bestätigt, dass eine komplexe Zahl über den erwarteten Wert verfügt.
- uid: microsoft.quantum.diagnostics.equalityfactcp
  summary: Bestätigt, dass eine komplexe Zahl über den erwarteten Wert verfügt.
- uid: microsoft.quantum.diagnostics.equalityfacti
  summary: Bestätigt, dass eine klassische int-Variable über den erwarteten Wert verfügt.
- uid: microsoft.quantum.diagnostics.equalityfactl
  summary: Bestätigt, dass eine klassische bigint-Variable über den erwarteten Wert verfügt.
- uid: microsoft.quantum.diagnostics.equalityfactr
  summary: Bestätigt, dass eine klassische Ergebnisvariable über den erwarteten Wert verfügt.
- uid: microsoft.quantum.diagnostics.equalitywithintolerancefact
  summary: Stellt den Anspruch dar, dass ein klassischer Gleit Komma Wert den erwarteten Wert bis zu einer bestimmten absoluten Toleranz aufweist.
- uid: microsoft.quantum.diagnostics.fact
  summary: Deklariert, dass eine klassische Bedingung true ist.
- uid: microsoft.quantum.diagnostics.nearequalityfactc
  summary: Bestätigt, dass eine klassische komplexe Zahl den erwarteten Wert bis zu einer kleinen Toleranz von 1 e-10 aufweist.
- uid: microsoft.quantum.diagnostics.nearequalityfactcp
  summary: Bestätigt, dass eine klassische komplexe Zahl den erwarteten Wert bis zu einer kleinen Toleranz von 1 e-10 aufweist.
- uid: microsoft.quantum.diagnostics.nearequalityfactd
  summary: Bestätigt, dass ein klassischer Gleit Komma Wert den erwarteten Wert bis zu einer kleinen Toleranz von 1E-10 aufweist.
operations:
- uid: microsoft.quantum.diagnostics.assertallzero
  summary: Assert, dass die angegebenen Qubits alle in $ \ket{0}$ State sind.
- uid: microsoft.quantum.diagnostics.assertallzerowithintolerance
  summary: Bestätigen Sie, dass die angegebenen Qubits alle in $ \ket{0}$ State bis zu einer gegebenen Toleranz aufweisen.
- uid: microsoft.quantum.diagnostics.assertoperationsequalinplace
  summary: >-
    Bei zwei Vorgängen wird von bestätigt, dass Sie für alle Eingabe Zustände identisch agieren.


    Diese Assertionen werden implementiert, indem die Aktion der Vorgänge für alle Zustände der Form $V _0 \otimes... \otimes v_ {n-1} $, wobei $V _K $ einer der Zustände $ \ket{0}$, $ \ket{1}$, $ \ket{+} $ und $ \ket{i} $ (+ 1 eigen Status des Pauli Y-Operators) ist.


    Diese Assertion verwendet $n $ Qubits und erfordert mehrere Aufrufe der zu vergleichenden Vorgänge.
- uid: microsoft.quantum.diagnostics.assertoperationsequalinplacecompbasis
  summary: >-
    Überprüft, ob der Vorgang `givenU` gleich dem Vorgang `expectedU` der angegebenen Eingabe Größe ist, indem die Aktion der Vorgänge nur für die Vektoren von der Berechnungsbasis überprüft wird.

    Dies ist eine erforderliche, aber nicht ausreichende Bedingung für die Gleichheit von zwei uniflüssen.
- uid: microsoft.quantum.diagnostics.assertoperationsequalreferenced
  summary: >-
    Bei zwei Vorgängen wird von bestätigt, dass Sie für alle Eingabe Zustände identisch agieren.


    Diese Assertionen werden mithilfe des "Choi – jamiłkowski"-"isomorphism" implementiert, um die Behauptung auf eine der Qubit-Zustands Assertionen für zwei entge Register zu reduzieren.

    Folglich benötigt dieser Vorgang nur einen einzelnen Vorgang für jeden zu testenden Vorgang, erfordert jedoch doppelt so viele Qubits, die zugewiesen werden müssen.

    Diese Assertion kann beispielsweise verwendet werden, um sicherzustellen, dass eine optimierte Version eines Vorgangs identisch mit der naive Implementierung verhält oder dass ein Vorgang, der für einen Bereich von nicht-Quantum-Eingaben agiert, mit bekannten Fällen übereinstimmt.
- uid: microsoft.quantum.diagnostics.assertqubit
  summary: Bestätigt, dass das Qubit-`q` den erwarteten eigen Zustand des Pauli Z-Operators aufweist.
- uid: microsoft.quantum.diagnostics.assertqubitisinstatewithintolerance
  summary: >-
    Bestätigt, dass ein Qubit im erwarteten Zustand ist.


    `expected` stellt einen komplexen Vektor dar, $ \ket{\psi} = \begin{bmatrix}a & b\end {bmatrix} ^ {\mathrm{T}} $.

    Das erste Element der Tupel, das jede $a $ darstellt, $b $ der reelle Teil der komplexen Zahl ist, während das zweite Element der imaginäre Teil ist.

    Das letzte Argument definiert die Toleranz, mit der die-Assertionen durchgeführt werden.
- uid: microsoft.quantum.diagnostics.assertqubitwithintolerance
  summary: Bestätigt, dass die Qubit-`q` den erwarteten eigen Zustand des Pauli Z-Operators bis zu einer gegebenen Toleranz aufweist.
summary: " # <a name=\"summary\"></a>Zusammenfassung\n Dieser Namespace enthält Funktionen und Vorgänge, die für Diagnosezwecke nützlich sind, einschließlich Assert-Vorgänge und Anspruchs Funktionen."
metadata:
  ms.openlocfilehash: c387a7dc3b2e997d00d54457b0af89a04fa918d3
  ms.sourcegitcommit: edcf15044d7bdf4f8b21fb8f6af4bde475eb13a0
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 11/05/2019
  ms.locfileid: "73056852"

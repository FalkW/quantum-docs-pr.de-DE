### YamlMime:QSharpType
uid: microsoft.quantum.diagnostics.assertqubitisinstatewithintolerance
name: AssertQubitIsInStateWithinTolerance
type: operation
namespace: microsoft.quantum.diagnostics
summary: >-
  Bestätigt, dass ein Qubit im erwarteten Zustand ist.


  `expected` stellt einen komplexen Vektor dar, $ \ket{\psi} = \begin{bmatrix}a & b\end {bmatrix} ^ {\mathrm{T}} $.

  Das erste Element der Tupel, das jede $a $ darstellt, $b $ der reelle Teil der komplexen Zahl ist, während das zweite Element der imaginäre Teil ist.

  Das letzte Argument definiert die Toleranz, mit der die-Assertionen durchgeführt werden.
remarks: >-
  Der folgende Mathematica-Code kann verwendet werden, um Ausdrücke für Mi, MX, my, MZ zu überprüfen:


  ```mathematica

  {Id, X, Y, Z} = Table[PauliMatrix[k], {k, 0, 3}];

  st = {{ reA + I imA }, { reB + I imB} };

  M = st . ConjugateTranspose[st];

  mx = Tr[M.X] // ComplexExpand;

  my = Tr[M.Y] // ComplexExpand;

  mz = Tr[M.Z] // ComplexExpand;

  mi = Tr[M.Id] // ComplexExpand;

  2 m == Id mi + X mx + Z mz + Y my // ComplexExpand // Simplify

  ```


  Die Toleranz ist die $L \_ {\infty} $ Distance zwischen 3 dimensionalem Real Vector (x, x ₃, x ₄) definiert durch $ \langle\psi | \psi\rangle = x \_ 1 I + x \_ 2 x + x \_ 3 Y + x \_ 4 Z $ und Real Vector (Y. y ₃, y ₄) definiert durch p = Y ₁ I + y. x + y ₃ y + y ₄ Z WHERE p ist die Dichte Matrix, die dem Status des Registers entspricht.

  Dies gilt nur unter der Annahme, dass TR (p) und TR (| ψ ⟩ ⟨ ψ |) gleich 1 sind (z. b. x ₁ = 1/2, y ₁ = 1/2).

  Wenn dies nicht der Fall ist, wird durch die-Funktion bestätigt, dass der Abstand zwischen (x, x ₁, x ₃-x ₁, x ₄-x ₁, x ₄ + x ₁) und (y, y ₁, y ₃-y ₁, y ₄-y ₁, y ₄ + y ₁) kleiner ist als der Tolerance-Parameter.
examples: >-
  ```Q#

  using (qubits = Qubit[2]) {
      // Both qubits are initialized as |0〉: a=(1 + 0*i), b=(0 + 0*i)
      AssertQubitIsInStateWithinTolerance((Complex(1., 0.), Complex(0., 0.)), qubits[0], 1e-5);
      AssertQubitIsInStateWithinTolerance((Complex(1., 0.), Complex(0., 0.)), qubits[1], 1e-5);
      Y(qubits[1]);
      // Y |0〉 = i |1〉: a=(0 + 0*i), b=(0 + 1*i)
      AssertQubitIsInStateWithinTolerance((Complex(0., 0.), Complex(0., 1.)), qubits[1], 1e-5);
  }

  ```
syntax: 'operation AssertQubitIsInStateWithinTolerance (expected : (Microsoft.Quantum.Math.Complex, Microsoft.Quantum.Math.Complex), register : Qubit, tolerance : Double) : Unit'
input:
  content: '(expected : (Microsoft.Quantum.Math.Complex, Microsoft.Quantum.Math.Complex), register : Qubit, tolerance : Double)'
  types:
  - name: expected
    summary: Es wurden komplexe Verstärkung für "$ \ket {0} $" bzw. "$ \ket $" erwartet {1} .
    types:
    - uid: microsoft.quantum.math.complex
    - uid: microsoft.quantum.math.complex
  - name: register
    summary: Qubit, dessen Zustand bestätigt werden soll. Beachten Sie, dass dieses Qubit von anderen zugeordneten Qubits getrennt werden und nicht entkoppelt ist.
    isPrimitive: true
    uid: Qubit
  - name: tolerance
    summary: >-
      Additiv Toleranz, mit der tatsächliche Verstärkung von der erwarteten Abweichung abweichen darf.

      Weitere Informationen finden Sie weiter unten in den hinweisen.
    isPrimitive: true
    uid: Double
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
metadata:
  ms.openlocfilehash: 6517c96e87042948d3e6f235e64c7b3e0dc5d387
  ms.sourcegitcommit: d6ac6f4345be0dd68f1bcd944f44b08e7a3cf346
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 09/02/2020
  ms.locfileid: "89337432"

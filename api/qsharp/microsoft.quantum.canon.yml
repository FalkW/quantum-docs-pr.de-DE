### YamlMime:QSharpNamespace
functions:
- summary: Gibt 1 zurück, wenn `index` eine ungerade Zahl von 1 s und-1 aufweist, wenn `index` eine gerade Anzahl von 1 s hat.
  uid: Microsoft.Quantum.Canon.Angle
- summary: ''
  uid: Microsoft.Quantum.Canon.AnyOutsideToleranceCP
- summary: ''
  uid: Microsoft.Quantum.Canon.AnyOutsideToleranceD
- summary: Anordnen von Steuerelement-, Ziel-und hilfsqubits gemäß einem Index
  uid: Microsoft.Quantum.Canon.ArrangedQubits
- summary: >+
    > [!WARNING]

    > Bigendiantolittleendian ist veraltet. Verwenden Sie stattdessen <xref:Microsoft.Quantum.Arithmetic.BigEndianAsLittleEndian>.

    >

    > Verwenden Sie @"Microsoft.Quantum.Arithmetic.BigEndianAsLittleEndian".

  uid: Microsoft.Quantum.Canon.BigEndianToLittleEndian
- summary: Bei einem Array von Vorgängen, die für eine einzelne Eingabe agieren, erzeugt einen neuen Vorgang, der jeden gegebenen Vorgang nacheinander ausführt.
  uid: Microsoft.Quantum.Canon.Bound
- summary: Bei einem Array von Vorgängen, die für eine einzelne Eingabe agieren, erzeugt einen neuen Vorgang, der jeden gegebenen Vorgang nacheinander ausführt. Der-Modifizierer `A` gibt an, dass alle Vorgänge im Array adjointable sind.
  uid: Microsoft.Quantum.Canon.BoundA
- summary: Bei einem Array von Vorgängen, die für eine einzelne Eingabe agieren, erzeugt einen neuen Vorgang, der jeden gegebenen Vorgang nacheinander ausführt. Der-Modifizierer `C` gibt an, dass alle Vorgänge im Array steuerbar sind.
  uid: Microsoft.Quantum.Canon.BoundC
- summary: Bei einem Array von Vorgängen, die für eine einzelne Eingabe agieren, erzeugt einen neuen Vorgang, der jeden gegebenen Vorgang nacheinander ausführt. Der-Modifizierer `CA` gibt an, dass alle Vorgänge im Array adjointable und steuerbar sind.
  uid: Microsoft.Quantum.Canon.BoundCA
- summary: Gibt bei einem Vorgang op einen neuen Vorgang zurück, der das OP anwendet, wenn ein klassisches Steuerelement "true" ist. Gibt an `false` , dass nichts passiert.
  uid: Microsoft.Quantum.Canon.CControlled
- summary: Gibt bei einem Vorgang op einen neuen Vorgang zurück, der das OP anwendet, wenn ein klassisches Steuerelement "true" ist. Gibt an `false` , dass nichts passiert. Der-Modifizierer `A` gibt an, dass der Vorgang adjointable ist.
  uid: Microsoft.Quantum.Canon.CControlledA
- summary: Gibt bei einem Vorgang op einen neuen Vorgang zurück, der das OP anwendet, wenn ein klassisches Steuerelement "true" ist. Gibt an `false` , dass nichts passiert. Der-Modifizierer `C` gibt an, dass der Vorgang steuerbar ist.
  uid: Microsoft.Quantum.Canon.CControlledC
- summary: Gibt bei einem Vorgang op einen neuen Vorgang zurück, der das OP anwendet, wenn ein klassisches Steuerelement "true" ist. Gibt an `false` , dass nichts passiert. Der-Modifizierer `CA` gibt an, dass der Vorgang steuerbar und adjointable ist.
  uid: Microsoft.Quantum.Canon.CControlledCA
- summary: Gibt die Komposition zweier Funktionen zurück.
  uid: Microsoft.Quantum.Canon.Compose
- summary: Gibt die Ausgabe der Komposition von `inner` und `outer` für eine angegebene Eingabe zurück.
  uid: Microsoft.Quantum.Canon.ComposedOutput
- summary: Bei den äußeren und inneren Vorgängen wird ein neuer Vorgang zurückgegeben, der den inneren Vorgang durch den äußeren Vorgang konjugiert.
  uid: Microsoft.Quantum.Canon.ConjugatedBy
- summary: Bei den äußeren und inneren Vorgängen wird ein neuer Vorgang zurückgegeben, der den inneren Vorgang durch den äußeren Vorgang konjugiert.
  uid: Microsoft.Quantum.Canon.ConjugatedByA
- summary: Bei den äußeren und inneren Vorgängen wird ein neuer Vorgang zurückgegeben, der den inneren Vorgang durch den äußeren Vorgang konjugiert.
  uid: Microsoft.Quantum.Canon.ConjugatedByC
- summary: Bei den äußeren und inneren Vorgängen wird ein neuer Vorgang zurückgegeben, der den inneren Vorgang durch den äußeren Vorgang konjugiert.
  uid: Microsoft.Quantum.Canon.ConjugatedByCA
- summary: Gibt einen einheitlichen Vorgang zurück, der ein Oracle auf das Ziel Register anwendet, wenn der Steuerelement Registrierungs Zustand einer angegebenen Bitmaske entspricht.
  uid: Microsoft.Quantum.Canon.ControlledOnBitString
- summary: Gibt einen einheitlichen Operator zurück, der ein Oracle auf das Ziel Register anwendet, wenn der Steuerelement Registrierungs Zustand einer angegebenen positiven ganzen Zahl entspricht.
  uid: Microsoft.Quantum.Canon.ControlledOnInt
- summary: >-
    Gibt eine Curry-Version eines Vorgangs für zwei Eingaben zurück.

    Bei einem Vorgang mit zwei Eingaben wendet diese Funktion z. b. die "isomorphism"-$f (x, y) \equiv f (x) (y) $ an, um einen Vorgang mit einer Eingabe zurückzugeben, der einen Vorgang mit einer Eingabe zurückgibt.
  uid: Microsoft.Quantum.Canon.CurriedOp
- summary: >+
    > [!WARNING]

    > "Debug" ist veraltet. Verwenden Sie stattdessen <xref:Microsoft.Quantum.Canon.DecomposedIntoTimeStepsCA>.

  uid: Microsoft.Quantum.Canon.DecomposeIntoTimeStepsCA
- summary: Gibt einen Vorgang zurück, der den Trotter – Suzuki Integrator für einen angegebenen Vorgang implementiert.
  uid: Microsoft.Quantum.Canon.DecomposedIntoTimeStepsCA
- summary: Gibt einen Vorgang zurück, der den angegebenen Vorgang mit dem angegebenen Argument anwendet.
  uid: Microsoft.Quantum.Canon.Delayed
- summary: Gibt einen Vorgang zurück, der den angegebenen Vorgang mit dem angegebenen Argument anwendet.
  uid: Microsoft.Quantum.Canon.DelayedA
- summary: Gibt einen Vorgang zurück, der den angegebenen Vorgang mit dem angegebenen Argument anwendet.
  uid: Microsoft.Quantum.Canon.DelayedC
- summary: Gibt einen Vorgang zurück, der den angegebenen Vorgang mit dem angegebenen Argument anwendet.
  uid: Microsoft.Quantum.Canon.DelayedCA
- summary: Gibt bei einem Single-Qubit-Pauli-Operator und dem Index eines Qubits einen multiqubit-Pauli-Operator mit dem angegebenen Single-Qubit-Operator an diesem Index und `PauliI` an jedem anderen Index zurück.
  uid: Microsoft.Quantum.Canon.EmbedPauli
- summary: Gibt bei einem Paar das erste Element zurück.
  uid: Microsoft.Quantum.Canon.Fst
- summary: Erstellt graue Codesequenzen.
  uid: Microsoft.Quantum.Canon.GrayCode
- summary: Berechnet die Gewichtungs Gewichtung einer Ganzzahl, d. h. die Anzahl von 1S in der binären Erweiterung.
  uid: Microsoft.Quantum.Canon.HammingWeightI
- summary: Ignoriert die Ausgabe eines Vorgangs oder einer Funktion.
  uid: Microsoft.Quantum.Canon.Ignore
- summary: Gibt nur dann true zurück, wenn der Eingabebereich leer ist.
  uid: Microsoft.Quantum.Canon.IsRangeEmpty
- summary: Testet, ob ein angegebener Ergebniswert gleich ist `One` .
  uid: Microsoft.Quantum.Canon.IsResultOne
- summary: Testet, ob ein angegebener Ergebniswert gleich ist `Zero` .
  uid: Microsoft.Quantum.Canon.IsResultZero
- summary: >+
    > [!WARNING]

    > "Littleendiantobigendian" ist veraltet. Verwenden Sie stattdessen <xref:Microsoft.Quantum.Arithmetic.LittleEndianAsBigEndian>.

    >

    > Verwenden Sie @"Microsoft.Quantum.Arithmetic.LittleEndianAsBigEndian".

  uid: Microsoft.Quantum.Canon.LittleEndianToBigEndian
- summary: Implementierungs Schritt von mehrfach gesteuerten Z-Drehungen.
  uid: Microsoft.Quantum.Canon.MultiplexZCoefficients
- summary: >-
    Gibt einen mehrfach kontrollierten einheitlichen Vorgang $U $ zurück, der eine einheitliche $V _J $ anwendet, wenn dies durch den n-Qubit-Zahlen Status $ \ket{j} $ gesteuert wird.

    $U = \sum ^ {2 ^ n-1} _ {j = 0} \ket{j}\bra{j}\otimes V_j $.
  uid: Microsoft.Quantum.Canon.MultiplexerBruteForceFromGenerator
- summary: >-
    Gibt einen mehrfach kontrollierten einheitlichen Vorgang $U $ zurück, der eine einheitliche $V _J $ anwendet, wenn dies durch den n-Qubit-Zahlen Status $ \ket{j} $ gesteuert wird.

    $U = \sum ^ {2 ^ n-1} _ {j = 0} \ket{j}\bra{j}\otimes V_j $.
  uid: Microsoft.Quantum.Canon.MultiplexerFromGenerator
- summary: >-
    Löst einen Vorgang für eine Stromversorgung aus.

    Das heißt, wenn ein Vorgang, der ein Gate $U $ darstellt, einen neuen Vorgang $U ^ m $ für eine Power $m $ zurückgibt.
  uid: Microsoft.Quantum.Canon.OperationPow
- summary: >-
    Löst einen Vorgang für eine Stromversorgung aus. Der-Modifizierer `A` gibt an, dass der Vorgang adjointable ist.

    Das heißt, wenn ein Vorgang, der ein Gate $U $ darstellt, einen neuen Vorgang $U ^ m $ für eine Power $m $ zurückgibt.
  uid: Microsoft.Quantum.Canon.OperationPowA
- summary: >-
    Löst einen Vorgang für eine Stromversorgung aus. Der-Modifizierer `C` gibt an, dass der Vorgang steuerbar ist.

    Das heißt, wenn ein Vorgang, der ein Gate $U $ darstellt, einen neuen Vorgang $U ^ m $ für eine Power $m $ zurückgibt.
  uid: Microsoft.Quantum.Canon.OperationPowC
- summary: >-
    Löst einen Vorgang für eine Stromversorgung aus. Der-Modifizierer `A` gibt an, dass der Vorgang steuerbar und adjointable ist.

    Das heißt, wenn ein Vorgang, der ein Gate $U $ darstellt, einen neuen Vorgang $U ^ m $ für eine Power $m $ zurückgibt.
  uid: Microsoft.Quantum.Canon.OperationPowCA
- summary: Schränkt einen Vorgang auf ein Array von Indizes eines Registers ein, d. h. ein unter Register.
  uid: Microsoft.Quantum.Canon.RestrictedToSubregister
- summary: Schränkt einen Vorgang auf ein Array von Indizes eines Registers ein, d. h. ein unter Register. Der-Modifizierer `A` gibt an, dass der Vorgang adjointable ist.
  uid: Microsoft.Quantum.Canon.RestrictedToSubregisterA
- summary: Schränkt einen Vorgang auf ein Array von Indizes eines Registers ein, d. h. ein unter Register. Der-Modifizierer `C` gibt an, dass der Vorgang steuerbar ist.
  uid: Microsoft.Quantum.Canon.RestrictedToSubregisterC
- summary: Schränkt einen Vorgang auf ein Array von Indizes eines Registers ein, d. h. ein unter Register. Der-Modifizierer `CA` gibt an, dass der Vorgang steuerbar und adjointable ist.
  uid: Microsoft.Quantum.Canon.RestrictedToSubregisterCA
- summary: Gibt bei einem Paar das zweite Element zurück.
  uid: Microsoft.Quantum.Canon.Snd
- summary: >+
    > [!WARNING]

    > Stackcapacity ist veraltet.

  uid: Microsoft.Quantum.Canon.StackCapacity
- summary: >+
    > [!WARNING]

    > Stacklength ist veraltet.

  uid: Microsoft.Quantum.Canon.StackLength
- summary: >+
    > [!WARNING]

    > Stacknew ist veraltet.

  uid: Microsoft.Quantum.Canon.StackNew
- summary: >+
    > [!WARNING]

    > Stackpeek ist veraltet.

  uid: Microsoft.Quantum.Canon.StackPeek
- summary: >+
    > [!WARNING]

    > Stackpop ist veraltet.

  uid: Microsoft.Quantum.Canon.StackPop
- summary: >+
    > [!WARNING]

    > Stackpush wurde als veraltet markiert.

  uid: Microsoft.Quantum.Canon.StackPush
- summary: Gibt bei Angabe einer Funktion und eines Vorgangs einen neuen Vorgang zurück, dessen Eingabe von der angegebenen Funktion transformiert wird.
  uid: Microsoft.Quantum.Canon.TransformedOperation
- summary: Gibt bei Angabe einer Funktion und eines Vorgangs einen neuen Vorgang zurück, dessen Eingabe von der angegebenen Funktion transformiert wird.
  uid: Microsoft.Quantum.Canon.TransformedOperationA
- summary: Gibt bei Angabe einer Funktion und eines Vorgangs einen neuen Vorgang zurück, dessen Eingabe von der angegebenen Funktion transformiert wird.
  uid: Microsoft.Quantum.Canon.TransformedOperationC
- summary: Gibt bei Angabe einer Funktion und eines Vorgangs einen neuen Vorgang zurück, dessen Eingabe von der angegebenen Funktion transformiert wird.
  uid: Microsoft.Quantum.Canon.TransformedOperationCA
- summary: Berechnet die Schrittgröße des Trotters in der rekursiven Implementierung des trocksimulations Algorithmus.
  uid: Microsoft.Quantum.Canon.TrotterStepSize
- summary: Gibt eine Funktion zurück, die Vorgänge zurückgibt, gibt einen neuen Vorgang zurück, der beide Eingaben als Tupel annimmt.
  uid: Microsoft.Quantum.Canon.UncurriedOp
- summary: Gibt eine Funktion zurück, die Vorgänge zurückgibt, gibt einen neuen Vorgang zurück, der beide Eingaben als Tupel annimmt. Der-Modifizierer `A` gibt an, dass die Vorgänge adjointable sind.
  uid: Microsoft.Quantum.Canon.UncurriedOpA
- summary: Gibt eine Funktion zurück, die Vorgänge zurückgibt, gibt einen neuen Vorgang zurück, der beide Eingaben als Tupel annimmt. Der-Modifizierer `C` gibt an, dass die Vorgänge steuerbar sind.
  uid: Microsoft.Quantum.Canon.UncurriedOpC
- summary: Gibt eine Funktion zurück, die Vorgänge zurückgibt, gibt einen neuen Vorgang zurück, der beide Eingaben als Tupel annimmt. Der-Modifizierer `CA` gibt an, dass die Vorgänge steuerbar und adjointable sind.
  uid: Microsoft.Quantum.Canon.UncurriedOpCA
- summary: Gibt ein Array aller Gewichtungs-1-Pauli-Operatoren für eine angegebene Anzahl von Qubits zurück.
  uid: Microsoft.Quantum.Canon.WeightOnePaulis
- summary: ''
  uid: Microsoft.Quantum.Canon.WithFirstInputApplied
- summary: >+
    > [!WARNING]

    > XOR ist veraltet. Verwenden Sie stattdessen <xref:Microsoft.Quantum.Logical.Xor>.

    >

    > Verwenden Sie @"microsoft.quantum.logical.xor".

  uid: Microsoft.Quantum.Canon.XOR
name: Microsoft.Quantum.Canon
newtypes:
- summary: Der Signaturtyp von ccnot Gate.
  uid: Microsoft.Quantum.Canon.CCNOTop
- summary: >+
    > [!WARNING]

    > Resultstack ist veraltet.

  uid: Microsoft.Quantum.Canon.ResultStack
operations:
- summary: Führt eine gesteuerte "and-Leiter" für ein Register der Ziel-Qubits aus.
  uid: Microsoft.Quantum.Canon.AndLadder
- summary: Kehrt ein angegebenes Ziel-Qubit nur dann ein, wenn beide Steuerelement-Qubits den Status 1 aufweisen, wobei die Messung zum Ausführen des Adjoint-Vorgangs verwendet wird.
  uid: Microsoft.Quantum.Canon.ApplyAnd
- summary: Berechnet eine Kette von und Gates
  uid: Microsoft.Quantum.Canon.ApplyAndChain
- summary: ''
  uid: Microsoft.Quantum.Canon.ApplyBound
- summary: ''
  uid: Microsoft.Quantum.Canon.ApplyBoundA
- summary: ''
  uid: Microsoft.Quantum.Canon.ApplyBoundC
- summary: ''
  uid: Microsoft.Quantum.Canon.ApplyBoundCA
- summary: Implementiert eine Cascade von ccnot Gates, die für die entsprechenden Bits zweier Qubit-Register gesteuert werden, und verhält sich für das nächste Qubit eines der Register. Beginnend mit den Qubits an Position 0 in beiden Registern als Steuerelemente, wird ccnot auf das Qubit an Position 1 des Ziel Registers angewendet und dann von den Qubits an Position 1 gesteuert, die auf dem Qubit an Position 2 im Zielregister agiert, usw., und endet mit einer Aktion auf dem Ziel-Qubit an der Position `Length(nQubits)-1` .
  uid: Microsoft.Quantum.Canon.ApplyCCNOTChain
- summary: Berechnet die Parität eines Registers von Qubits direkt.
  uid: Microsoft.Quantum.Canon.ApplyCNOTChain
- summary: Berechnet die Parität eines Arrays von Qubits in einem Ziel-Qubit.
  uid: Microsoft.Quantum.Canon.ApplyCNOTChainWithTarget
- summary: Wendet einen einheitlichen Vorgang für das Ziel Register an, der in einem durch eine bestimmte Bitmaske angegebenen Zustand gesteuert wird.
  uid: Microsoft.Quantum.Canon.ApplyControlledOnBitString
- summary: Wendet einen einheitlichen Vorgang auf das Ziel Register an, wenn der Steuerelement Registrierungs Zustand einer angegebenen positiven ganzen Zahl entspricht.
  uid: Microsoft.Quantum.Canon.ApplyControlledOnInt
- summary: ''
  uid: Microsoft.Quantum.Canon.ApplyCurriedOp
- summary: ''
  uid: Microsoft.Quantum.Canon.ApplyCurriedOpA
- summary: ''
  uid: Microsoft.Quantum.Canon.ApplyCurriedOpC
- summary: ''
  uid: Microsoft.Quantum.Canon.ApplyCurriedOpCA
- summary: Wendet ein Array komplexer Phasen auf numerische Basiszustände eines Register von Qubits an.
  uid: Microsoft.Quantum.Canon.ApplyDiagonalUnitary
- summary: Wendet den fermionic-Swap an.
  uid: Microsoft.Quantum.Canon.ApplyFermionicSWAP
- summary: Wendet einen Vorgang an, der von einem klassischen Bit abhängig ist.
  uid: Microsoft.Quantum.Canon.ApplyIf
- summary: Wendet einen adjointable-Vorgang an, der auf einem klassischen Bit bedingt ist.
  uid: Microsoft.Quantum.Canon.ApplyIfA
- summary: Wendet eine steuerbare Operation an, die auf einem klassischen Bit bedingt ist.
  uid: Microsoft.Quantum.Canon.ApplyIfC
- summary: Wendet einen einheitlichen Vorgang an, der auf einem klassischen Bit bedingt ist.
  uid: Microsoft.Quantum.Canon.ApplyIfCA
- summary: Wendet abhängig vom Wert eines klassischen Bits einen von zwei Vorgängen an.
  uid: Microsoft.Quantum.Canon.ApplyIfElseB
- summary: Wendet abhängig vom Wert eines klassischen Bits einen von zwei adjointable-Vorgängen an.
  uid: Microsoft.Quantum.Canon.ApplyIfElseBA
- summary: Wendet je nach dem Wert eines klassischen Bits einen von zwei kontrollierbaren Vorgängen an.
  uid: Microsoft.Quantum.Canon.ApplyIfElseBC
- summary: Wendet abhängig vom Wert eines klassischen Bits einen von zwei einheitlichen Vorgängen an.
  uid: Microsoft.Quantum.Canon.ApplyIfElseBCA
- summary: Wendet je nach dem Wert eines klassischen Ergebnisses einen von zwei Vorgängen an.
  uid: Microsoft.Quantum.Canon.ApplyIfElseR
- summary: Wendet abhängig vom Wert eines klassischen Ergebnisses einen von zwei adjointable-Vorgängen an.
  uid: Microsoft.Quantum.Canon.ApplyIfElseRA
- summary: Wendet je nach dem Wert eines klassischen Ergebnisses einen von zwei kontrollierbaren Vorgängen an.
  uid: Microsoft.Quantum.Canon.ApplyIfElseRC
- summary: Wendet abhängig vom Wert eines klassischen Ergebnisses einen von zwei einheitlichen Vorgängen an.
  uid: Microsoft.Quantum.Canon.ApplyIfElseRCA
- summary: Wendet einen Vorgang an, der von einem klassischen Ergebniswert abhängig ist.
  uid: Microsoft.Quantum.Canon.ApplyIfOne
- summary: Wendet einen adjointable-Vorgang an, der auf einen klassischen Ergebniswert zurückzuführen ist.
  uid: Microsoft.Quantum.Canon.ApplyIfOneA
- summary: Wendet einen kontrollierbaren Vorgang an, der auf einen klassischen Ergebniswert zurückzuführen ist.
  uid: Microsoft.Quantum.Canon.ApplyIfOneC
- summary: Wendet einen einheitlichen Vorgang an, der auf einen klassischen Ergebniswert zurückzuführen ist.
  uid: Microsoft.Quantum.Canon.ApplyIfOneCA
- summary: Wendet einen Vorgang an, der von einem klassischen Ergebniswert von 0 (null) abhängt.
  uid: Microsoft.Quantum.Canon.ApplyIfZero
- summary: Wendet einen adjointable-Vorgang an, der von einem klassischen Ergebniswert von 0 (null) abhängt.
  uid: Microsoft.Quantum.Canon.ApplyIfZeroA
- summary: Wendet einen für einen klassischen Ergebniswert bedingten Vorgang an, der 0 (null) ist.
  uid: Microsoft.Quantum.Canon.ApplyIfZeroC
- summary: Wendet einen einheitlichen Vorgang an, der auf einem klassischen Ergebniswert von 0 (null) liegt.
  uid: Microsoft.Quantum.Canon.ApplyIfZeroCA
- summary: Kehrt ein angegebenes Ziel-Qubit nur dann ein, wenn beide Steuerelement-Qubits den Status 1 aufweisen, mit T-Tiefe 1 und mithilfe von Messungen zum Ausführen der Adjoint-Operation.
  uid: Microsoft.Quantum.Canon.ApplyLowDepthAnd
- summary: Wendet eine mehrfach gesteuerte Version eines einzeln kontrollierten Vorgangs an. Der-Modifizierer `C` gibt an, dass der Single-Qubit-Vorgang steuerbar ist.
  uid: Microsoft.Quantum.Canon.ApplyMultiControlledC
- summary: Wendet eine mehrfach gesteuerte Version eines einzeln kontrollierten Vorgangs an. Der-Modifizierer `CA` gibt an, dass der Single-Qubit-Vorgang steuerbar und adjointable ist.
  uid: Microsoft.Quantum.Canon.ApplyMultiControlledCA
- summary: Implementiert ein mehrfach kontrolliertes "deffoli"-Gate, wobei angenommen wird, dass das Ziel-Qubit initialisiert wird.  Der Adjoint-Vorgang geht davon aus, dass das Ziel-Qubit auf 0 zurückgesetzt wird.
  uid: Microsoft.Quantum.Canon.ApplyMultiplyControlledAnd
- summary: Implementiert ein mehrfach kontrolliertes "deffoli"-Gate, wobei angenommen wird, dass das Ziel-Qubit initialisiert wird.  Der Adjoint-Vorgang geht davon aus, dass das Ziel-Qubit auf 0 zurückgesetzt wird.  Erfordert eine RZ-Tiefe von 1, während die Anzahl von hilfsqubits in der Anzahl der Qubits exponentiell ist.
  uid: Microsoft.Quantum.Canon.ApplyMultiplyControlledLowDepthAnd
- summary: Wendet denselben op-Vorgang über ein Qubit-Register mehrmals an.
  uid: Microsoft.Quantum.Canon.ApplyOpRepeatedlyOver
- summary: Wendet denselben op-Vorgang über ein Qubit-Register mehrmals an.
  uid: Microsoft.Quantum.Canon.ApplyOpRepeatedlyOverA
- summary: Wendet denselben op-Vorgang über ein Qubit-Register mehrmals an.
  uid: Microsoft.Quantum.Canon.ApplyOpRepeatedlyOverC
- summary: Wendet denselben op-Vorgang über ein Qubit-Register mehrmals an.
  uid: Microsoft.Quantum.Canon.ApplyOpRepeatedlyOverCA
- summary: ''
  uid: Microsoft.Quantum.Canon.ApplyOperationRepeatedly
- summary: ''
  uid: Microsoft.Quantum.Canon.ApplyOperationRepeatedlyA
- summary: ''
  uid: Microsoft.Quantum.Canon.ApplyOperationRepeatedlyC
- summary: ''
  uid: Microsoft.Quantum.Canon.ApplyOperationRepeatedlyCA
- summary: Wenn ein Multi-Qubit-Pauli-Operator angegeben ist, wendet den entsprechenden-Vorgang auf ein Register an.
  uid: Microsoft.Quantum.Canon.ApplyPauli
- summary: Wendet einen Pauli-Operator auf jedes Qubit in einem Array an, wenn das entsprechende Bit eines booleschen Arrays mit einer angegebenen Eingabe übereinstimmt.
  uid: Microsoft.Quantum.Canon.ApplyPauliFromBitString
- summary: Führt die Quantum Fourier-Transformation für ein Quantum-Register durch, das eine ganze Zahl in der Little-Endian-Darstellung enthält.
  uid: Microsoft.Quantum.Canon.ApplyQuantumFourierTransform
- summary: Führt die Quantum Fourier-Transformation für ein Quantum-Register durch, das eine ganze Zahl in der Big-Endian-Darstellung enthält.
  uid: Microsoft.Quantum.Canon.ApplyQuantumFourierTransformBE
- summary: >+
    > [!WARNING]

    > Applyrevergendopbigendiana ist veraltet. Verwenden Sie stattdessen <xref:Microsoft.Quantum.Arithmetic.ApplyReversedOpBEA>.

    >

    > Verwenden Sie @"Microsoft.Quantum.Arithmetic.ApplyReversedOpBEA".

  uid: Microsoft.Quantum.Canon.ApplyReversedOpBigEndianA
- summary: >+
    > [!WARNING]

    > Applyrevergendopbigendianc ist veraltet. Verwenden Sie stattdessen <xref:Microsoft.Quantum.Arithmetic.ApplyReversedOpBEC>.

    >

    > Verwenden Sie @"Microsoft.Quantum.Arithmetic.ApplyReversedOpBEC".

  uid: Microsoft.Quantum.Canon.ApplyReversedOpBigEndianC
- summary: >+
    > [!WARNING]

    > Applyrevereindopbigendianca ist veraltet. Verwenden Sie stattdessen <xref:Microsoft.Quantum.Arithmetic.ApplyReversedOpBECA>.

    >

    > Verwenden Sie @"Microsoft.Quantum.Arithmetic.ApplyReversedOpBEC".

  uid: Microsoft.Quantum.Canon.ApplyReversedOpBigEndianCA
- summary: >+
    > [!WARNING]

    > Applyreverledoplittleendiana ist veraltet. Verwenden Sie stattdessen <xref:Microsoft.Quantum.Arithmetic.ApplyReversedOpLEA>.

    >

    > Verwenden Sie @"Microsoft.Quantum.Arithmetic.ApplyReversedOpLEA".

  uid: Microsoft.Quantum.Canon.ApplyReversedOpLittleEndianA
- summary: >+
    > [!WARNING]

    > Applyreverledoplittleendianc ist veraltet. Verwenden Sie stattdessen <xref:Microsoft.Quantum.Arithmetic.ApplyReversedOpLEC>.

    >

    > Verwenden Sie @"Microsoft.Quantum.Arithmetic.ApplyReversedOpLEC".

  uid: Microsoft.Quantum.Canon.ApplyReversedOpLittleEndianC
- summary: >+
    > [!WARNING]

    > Applyreverledoplittleendianca ist veraltet. Verwenden Sie stattdessen <xref:Microsoft.Quantum.Arithmetic.ApplyReversedOpLECA>.

    >

    > Verwenden Sie @"Microsoft.Quantum.Arithmetic.ApplyReversedOpLEC".

  uid: Microsoft.Quantum.Canon.ApplyReversedOpLittleEndianCA
- summary: >+
    > [!WARNING]

    > Applyripplecarrycomparatorle ist veraltet. Verwenden Sie stattdessen <xref:Microsoft.Quantum.Arithmetic.CompareUsingRippleCarry>.

    >

    > Verwenden Sie @"Microsoft.Quantum.Arithmetic.CompareUsingRippleCarry".

  uid: Microsoft.Quantum.Canon.ApplyRippleCarryComparatorLE
- summary: Wendet eine Liste von OPS und deren Zielen sequenziell auf ein Array an.
  uid: Microsoft.Quantum.Canon.ApplySeriesOfOps
- summary: Wendet eine Liste von OPS und deren Zielen sequenziell auf ein Array an. (Adjoint)
  uid: Microsoft.Quantum.Canon.ApplySeriesOfOpsA
- summary: Wendet eine Liste von OPS und deren Zielen sequenziell auf ein Array an. Klimatisiert
  uid: Microsoft.Quantum.Canon.ApplySeriesOfOpsC
- summary: Wendet eine Liste von OPS und deren Zielen sequenziell auf ein Array an. (Adjoint + gesteuert)
  uid: Microsoft.Quantum.Canon.ApplySeriesOfOpsCA
- summary: Wendet für jedes Element in einem Register einen Single-Qubit-Vorgang an.
  uid: Microsoft.Quantum.Canon.ApplyToEach
- summary: Wendet für jedes Element in einem Register einen Single-Qubit-Vorgang an. Der-Modifizierer `A` gibt an, dass der Single-Qubit-Vorgang adjointable ist.
  uid: Microsoft.Quantum.Canon.ApplyToEachA
- summary: Wendet für jedes Element in einem Register einen Single-Qubit-Vorgang an. Der-Modifizierer `C` gibt an, dass der Single-Qubit-Vorgang steuerbar ist.
  uid: Microsoft.Quantum.Canon.ApplyToEachC
- summary: Wendet für jedes Element in einem Register einen Single-Qubit-Vorgang an. Der-Modifizierer `CA` gibt an, dass der Single-Qubit-Vorgang steuerbar und adjointable ist.
  uid: Microsoft.Quantum.Canon.ApplyToEachCA
- summary: Wendet einen Single-Qubit-Vorgang auf jedes indizierte Element in einem Register an.
  uid: Microsoft.Quantum.Canon.ApplyToEachIndex
- summary: Wendet einen Single-Qubit-Vorgang auf jedes indizierte Element in einem Register an. Der-Modifizierer `A` gibt an, dass der Single-Qubit-Vorgang adjointable ist.
  uid: Microsoft.Quantum.Canon.ApplyToEachIndexA
- summary: Wendet einen Single-Qubit-Vorgang auf jedes indizierte Element in einem Register an. Der-Modifizierer `C` gibt an, dass der Single-Qubit-Vorgang steuerbar ist.
  uid: Microsoft.Quantum.Canon.ApplyToEachIndexC
- summary: Wendet einen Single-Qubit-Vorgang auf jedes indizierte Element in einem Register an. Der-Modifizierer `CA` gibt an, dass der Single-Qubit-Vorgang adjointable und steuerbar ist.
  uid: Microsoft.Quantum.Canon.ApplyToEachIndexCA
- summary: Wendet einen Vorgang auf ein angegebenes Element eines Arrays an.
  uid: Microsoft.Quantum.Canon.ApplyToElement
- summary: Wendet einen Vorgang auf ein angegebenes Element eines Arrays an.
  uid: Microsoft.Quantum.Canon.ApplyToElementA
- summary: Wendet einen Vorgang auf ein angegebenes Element eines Arrays an.
  uid: Microsoft.Quantum.Canon.ApplyToElementC
- summary: Wendet einen Vorgang auf ein angegebenes Element eines Arrays an.
  uid: Microsoft.Quantum.Canon.ApplyToElementCA
- summary: Wendet einen Vorgang auf das erste Qubit im Register an.
  uid: Microsoft.Quantum.Canon.ApplyToFirstQubit
- summary: Wendet einen Vorgang auf das erste Qubit im Register an. Der-Modifizierer `A` gibt an, dass der Vorgang adjointable ist.
  uid: Microsoft.Quantum.Canon.ApplyToFirstQubitA
- summary: Wendet Operation op auf das erste Qubit im Register an. Der-Modifizierer `C` gibt an, dass der Vorgang steuerbar ist.
  uid: Microsoft.Quantum.Canon.ApplyToFirstQubitC
- summary: Wendet Operation op auf das erste Qubit im Register an. Der-Modifizierer `CA` gibt an, dass der Vorgang steuerbar und adjointable ist.
  uid: Microsoft.Quantum.Canon.ApplyToFirstQubitCA
- summary: Wendet einen Vorgang auf die ersten drei Qubits im Register an.
  uid: Microsoft.Quantum.Canon.ApplyToFirstThreeQubits
- summary: Wendet einen Vorgang auf die ersten drei Qubits im Register an. Der-Modifizierer `A` gibt an, dass der Vorgang adjointable ist.
  uid: Microsoft.Quantum.Canon.ApplyToFirstThreeQubitsA
- summary: Wendet einen Vorgang auf die ersten drei Qubits im Register an. Der-Modifizierer `C` gibt an, dass der Vorgang steuerbar ist.
  uid: Microsoft.Quantum.Canon.ApplyToFirstThreeQubitsC
- summary: Wendet einen Vorgang auf die ersten drei Qubits im Register an. Der-Modifizierer `CA` gibt an, dass der Vorgang steuerbar und adjointable ist.
  uid: Microsoft.Quantum.Canon.ApplyToFirstThreeQubitsCA
- summary: Wendet einen Vorgang auf die ersten beiden Qubits im Register an.
  uid: Microsoft.Quantum.Canon.ApplyToFirstTwoQubits
- summary: Wendet einen Vorgang auf die ersten beiden Qubits im Register an. Der-Modifizierer `A` gibt an, dass der Vorgang adjointable ist.
  uid: Microsoft.Quantum.Canon.ApplyToFirstTwoQubitsA
- summary: Wendet einen Vorgang auf die ersten beiden Qubits im Register an. Der-Modifizierer `C` gibt an, dass der Vorgang steuerbar ist.
  uid: Microsoft.Quantum.Canon.ApplyToFirstTwoQubitsC
- summary: Wendet einen Vorgang auf die ersten beiden Qubits im Register an. Der-Modifizierer `CA` gibt an, dass der Vorgang steuerbar und adjointable ist.
  uid: Microsoft.Quantum.Canon.ApplyToFirstTwoQubitsCA
- summary: Wendet einen Vorgang auf das erste Element eines Arrays an.
  uid: Microsoft.Quantum.Canon.ApplyToHead
- summary: Wendet einen Vorgang auf das erste Element eines Arrays an.
  uid: Microsoft.Quantum.Canon.ApplyToHeadA
- summary: Wendet einen Vorgang auf das erste Element eines Arrays an.
  uid: Microsoft.Quantum.Canon.ApplyToHeadC
- summary: Wendet einen Vorgang auf das erste Element eines Arrays an.
  uid: Microsoft.Quantum.Canon.ApplyToHeadCA
- summary: Wendet einen Vorgang auf alle bis auf das letzte Element eines Arrays an.
  uid: Microsoft.Quantum.Canon.ApplyToMost
- summary: Wendet einen Vorgang auf alle bis auf das letzte Element eines Arrays an.
  uid: Microsoft.Quantum.Canon.ApplyToMostA
- summary: Wendet einen Vorgang auf alle bis auf das letzte Element eines Arrays an.
  uid: Microsoft.Quantum.Canon.ApplyToMostC
- summary: Wendet einen Vorgang auf alle bis auf das letzte Element eines Arrays an.
  uid: Microsoft.Quantum.Canon.ApplyToMostCA
- summary: Wendet ein paar von Vorgängen auf eine bestimmte Partition eines Registers in zwei Teilen an.
  uid: Microsoft.Quantum.Canon.ApplyToPartition
- summary: Wendet ein paar von Vorgängen auf eine bestimmte Partition eines Registers in zwei Teilen an. Der-Modifizierer `A` gibt an, dass der Vorgang adjointable ist.
  uid: Microsoft.Quantum.Canon.ApplyToPartitionA
- summary: Wendet ein paar von Vorgängen auf eine bestimmte Partition eines Registers in zwei Teilen an. Der-Modifizierer `C` gibt an, dass der Vorgang steuerbar ist.
  uid: Microsoft.Quantum.Canon.ApplyToPartitionC
- summary: Wendet ein paar von Vorgängen auf eine bestimmte Partition eines Registers in zwei Teilen an. Der-Modifizierer `CA` gibt an, dass der Vorgang steuerbar und adjointable ist.
  uid: Microsoft.Quantum.Canon.ApplyToPartitionCA
- summary: Wendet einen Vorgang auf alle außer auf das erste Element eines Arrays an.
  uid: Microsoft.Quantum.Canon.ApplyToRest
- summary: Wendet einen Vorgang auf alle außer auf das erste Element eines Arrays an.
  uid: Microsoft.Quantum.Canon.ApplyToRestA
- summary: Wendet einen Vorgang auf alle außer auf das erste Element eines Arrays an.
  uid: Microsoft.Quantum.Canon.ApplyToRestC
- summary: Wendet einen Vorgang auf alle außer auf das erste Element eines Arrays an.
  uid: Microsoft.Quantum.Canon.ApplyToRestCA
- summary: Wendet einen Vorgang auf ein unter Register eines Register mit Qubits an, die durch ein Array ihrer Indizes angegeben werden.
  uid: Microsoft.Quantum.Canon.ApplyToSubregister
- summary: Wendet einen Vorgang auf ein unter Register eines Register mit Qubits an, die durch ein Array ihrer Indizes angegeben werden. Der-Modifizierer `A` gibt an, dass der Vorgang adjointable ist.
  uid: Microsoft.Quantum.Canon.ApplyToSubregisterA
- summary: Wendet einen Vorgang auf ein unter Register eines Register mit Qubits an, die durch ein Array ihrer Indizes angegeben werden. Der-Modifizierer `C` gibt an, dass der Vorgang steuerbar ist.
  uid: Microsoft.Quantum.Canon.ApplyToSubregisterC
- summary: Wendet einen Vorgang auf ein unter Register eines Register mit Qubits an, die durch ein Array ihrer Indizes angegeben werden. Der-Modifizierer `CA` gibt an, dass der Vorgang steuerbar und adjointable ist.
  uid: Microsoft.Quantum.Canon.ApplyToSubregisterCA
- summary: Wendet einen Vorgang auf das letzte Element eines Arrays an.
  uid: Microsoft.Quantum.Canon.ApplyToTail
- summary: Wendet einen Vorgang auf das letzte Element eines Arrays an.
  uid: Microsoft.Quantum.Canon.ApplyToTailA
- summary: Wendet einen Vorgang auf das letzte Element eines Arrays an.
  uid: Microsoft.Quantum.Canon.ApplyToTailC
- summary: Wendet einen Vorgang auf das letzte Element eines Arrays an.
  uid: Microsoft.Quantum.Canon.ApplyToTailCA
- summary: Bei zwei Vorgängen wird eine als konjugated mit dem anderen angewendet.
  uid: Microsoft.Quantum.Canon.ApplyWith
- summary: Bei zwei Vorgängen wird eine als konjugated mit dem anderen angewendet.
  uid: Microsoft.Quantum.Canon.ApplyWithA
- summary: Bei zwei Vorgängen wird eine als konjugated mit dem anderen angewendet.
  uid: Microsoft.Quantum.Canon.ApplyWithC
- summary: Bei zwei Vorgängen wird eine als konjugated mit dem anderen angewendet.
  uid: Microsoft.Quantum.Canon.ApplyWithCA
- summary: Bei einem Vorgang, der eine Eingabe akzeptiert, eine Funktion, die eine mit diesem Vorgang kompatible Ausgabe zurückgibt, sowie eine Eingabe für diese Funktion wendet den Vorgang mithilfe der-Funktion an, um die Eingabe in ein vom Vorgang erwartetes Formular umzuwandeln.
  uid: Microsoft.Quantum.Canon.ApplyWithInputTransformation
- summary: Bei einem Vorgang, der eine Eingabe akzeptiert, eine Funktion, die eine mit diesem Vorgang kompatible Ausgabe zurückgibt, sowie eine Eingabe für diese Funktion wendet den Vorgang mithilfe der-Funktion an, um die Eingabe in ein vom Vorgang erwartetes Formular umzuwandeln.
  uid: Microsoft.Quantum.Canon.ApplyWithInputTransformationA
- summary: Bei einem Vorgang, der eine Eingabe akzeptiert, eine Funktion, die eine mit diesem Vorgang kompatible Ausgabe zurückgibt, sowie eine Eingabe für diese Funktion wendet den Vorgang mithilfe der-Funktion an, um die Eingabe in ein vom Vorgang erwartetes Formular umzuwandeln.
  uid: Microsoft.Quantum.Canon.ApplyWithInputTransformationC
- summary: Bei einem Vorgang, der eine Eingabe akzeptiert, eine Funktion, die eine mit diesem Vorgang kompatible Ausgabe zurückgibt, sowie eine Eingabe für diese Funktion wendet den Vorgang mithilfe der-Funktion an, um die Eingabe in ein vom Vorgang erwartetes Formular umzuwandeln.
  uid: Microsoft.Quantum.Canon.ApplyWithInputTransformationCA
- summary: Wenden Sie die ungefähre quantfourier Transform (aqft) auf ein Quantum-Register an.
  uid: Microsoft.Quantum.Canon.ApproximateQFT
- summary: Wendet ein Array komplexer Phasen auf numerische Basiszustände eines Register von Qubits an und verkürzt kleine Drehwinkel entsprechend einer bestimmten Toleranz.
  uid: Microsoft.Quantum.Canon.ApproximatelyApplyDiagonalUnitary
- summary: Wendet eine für ein Array von Qubits bedingte Pauli-Drehung an und verkürzt kleine Drehwinkel entsprechend einer gegebenen Toleranz.
  uid: Microsoft.Quantum.Canon.ApproximatelyMultiplexPauli
- summary: Wendet eine Pauli Z-Drehung an, die auf ein Array von Qubits bedingt ist, wobei kleine Drehwinkel entsprechend einer gegebenen Toleranz abgeschnitten werden.
  uid: Microsoft.Quantum.Canon.ApproximatelyMultiplexZ
- summary: >+
    > [!WARNING]

    > Asserthighestbit ist veraltet. Verwenden Sie stattdessen <xref:Microsoft.Quantum.Arithmetic.AssertMostSignificantBit>.

    >

    > Verwenden Sie @"Microsoft.Quantum.Arithmetic.AssertMostSignificantBit".

  uid: Microsoft.Quantum.Canon.AssertHighestBit
- summary: >+
    > [!WARNING]

    > Assertlessthanphasele ist veraltet. Verwenden Sie stattdessen <xref:Microsoft.Quantum.Arithmetic.AssertPhaseLessThan>.

    >

    > Verwenden Sie @"Microsoft.Quantum.Arithmetic.AssertPhaseLessThan".

  uid: Microsoft.Quantum.Canon.AssertLessThanPhaseLE
- summary: >+
    > [!WARNING]

    > Assertphase ist veraltet. Verwenden Sie stattdessen <xref:Microsoft.Quantum.Diagnostics.AssertPhase>.

  uid: Microsoft.Quantum.Canon.AssertPhase
- summary: >+
    > [!WARNING]

    > Cnotchain ist veraltet. Verwenden Sie stattdessen <xref:Microsoft.Quantum.Canon.ApplyCNOTChain>.

  uid: Microsoft.Quantum.Canon.CNOTChain
- summary: >+
    > [!WARNING]

    > Cnotchaintarget ist veraltet. Verwenden Sie stattdessen <xref:Microsoft.Quantum.Canon.ApplyCNOTChainWithTarget>.

  uid: Microsoft.Quantum.Canon.CNOTChainTarget
- summary: >-
    Wendet das X (gesteuertes X)-Gate auf ein paar von Qubits an.

    $ $ \begin{align} \left (\begin{Matrix} 1 & 0 & 0 & 0 \\ \\ 0 & 1 & 0 & 0 \\ \\ 0 & 0 & 0 & 1 \\ \\ 0 & 0 & 1 & 0 \end{Matrix}\right) \end{align}, $ $, wobei Zeilen und Spalten im Quantum-Konzept Handbuch organisiert sind.
  uid: Microsoft.Quantum.Canon.CX
- summary: >-
    Wendet das Ende-Y-Gate (CY) auf ein paar von Qubits an.

    $ $ \begin{align} 1 & 0 & 0 & 0 \\ \\ 0 & 1 & 0 & 0 \\ \\ 0 & 0 & 0 &-i \\ \\ 0 & 0 & i & 0 \end{align}, $ $, wobei Zeilen und Spalten im Quantum-Konzept Handbuch organisiert sind.
  uid: Microsoft.Quantum.Canon.CY
- summary: >-
    Wendet das Tor der kontrollierten-Z (CZ) auf ein paar von Qubits an.

    $ $ \begin{align} 1 & 0 & 0 & 0 \\ \\ 0 & 1 & 0 & 0 \\ \\ 0 & 0 & 1 & 0 \\ \\ 0 & 0 & 0 &-1 \end{align}, $ $, wobei Zeilen und Spalten im Quantum-Konzept Handbuch organisiert sind.
  uid: Microsoft.Quantum.Canon.CZ
- summary: >+
    > [!WARNING]

    > Cascadeccnot ist veraltet. Verwenden Sie stattdessen <xref:Microsoft.Quantum.Canon.ApplyCCNOTChain>.

  uid: Microsoft.Quantum.Canon.CascadeCCNOT
- summary: >+
    > [!WARNING]

    > Cascadecnot ist veraltet. Verwenden Sie stattdessen <xref:Microsoft.Quantum.Canon.ApplyCNOTChain>.

    >

    > Verwenden Sie @"microsoft.quantum.canon.applycnotchain".

  uid: Microsoft.Quantum.Canon.CascadeCNOT
- summary: Wendet einen angegebenen Vorgang mit einer Verzögerung an.
  uid: Microsoft.Quantum.Canon.Delay
- summary: Wendet einen angegebenen Vorgang mit einer Verzögerung an.
  uid: Microsoft.Quantum.Canon.DelayA
- summary: Wendet einen angegebenen Vorgang mit einer Verzögerung an.
  uid: Microsoft.Quantum.Canon.DelayC
- summary: Wendet einen angegebenen Vorgang mit einer Verzögerung an.
  uid: Microsoft.Quantum.Canon.DelayCA
- summary: >-
    Wendet die y-Basis-analog auf die Hadamard-Transformation an, die die Z-und Y-Achse interändert.

    Die Y Hadamard-Transformation $H _Y = S H $ auf einem einzelnen Qubit lautet: \begin{align} H_Y \mathrel{: =} \frac {1} {\sqrt {2} } \begin{bmatrix} 1 & 1 \\ \\ i &-i \end{bmatrix}. \end{align}
  uid: Microsoft.Quantum.Canon.HY
- summary: >+
    > [!WARNING]

    > Inplacemajority ist veraltet. Verwenden Sie stattdessen <xref:Microsoft.Quantum.Arithmetic.ApplyMajorityInPlace>.

    >

    > Verwenden Sie @"microsoft.quantum.arithmetic.applymajorityinplace".

  uid: Microsoft.Quantum.Canon.InPlaceMajority
- summary: >+
    > [!WARNING]

    > Inplacexorbe ist veraltet. Verwenden Sie stattdessen <xref:ApplyReversedOpLECA(ApplyXorInPlace(value, _), target)>.

    >

    > Dieser Vorgang wurde entfernt.

  uid: Microsoft.Quantum.Canon.InPlaceXorBE
- summary: >+
    > [!WARNING]

    > Inplacexorle ist veraltet. Verwenden Sie stattdessen <xref:Microsoft.Quantum.Measurement.ApplyXorInPlace>.

    >

    > Verwenden Sie @"Microsoft.Quantum.Measurement.ApplyXorInPlace".

  uid: Microsoft.Quantum.Canon.InPlaceXorLE
- summary: >+
    > [!WARNING]

    > Integerincrementle ist veraltet. Verwenden Sie stattdessen <xref:Microsoft.Quantum.Arithmetic.IncrementByInteger>.

    >

    > Verwenden Sie @"Microsoft.Quantum.Arithmetic.IncrementByInteger".

  uid: Microsoft.Quantum.Canon.IntegerIncrementLE
- summary: >+
    > [!WARNING]

    > Integerincrementphasele ist veraltet. Verwenden Sie stattdessen <xref:Microsoft.Quantum.Arithmetic.IncrementPhaseByInteger>.

    >

    > Verwenden Sie @"Microsoft.Quantum.Arithmetic.IncrementPhaseByInteger".

  uid: Microsoft.Quantum.Canon.IntegerIncrementPhaseLE
- summary: Wendet einen Vorgang für jeden Index in der kartesischen Potenz eines ganzzahligen Bereichs an.
  uid: Microsoft.Quantum.Canon.IterateThroughCartesianPower
- summary: Wendet einen Vorgang für jeden Index im kartesischen Produkt mehrerer Bereiche an.
  uid: Microsoft.Quantum.Canon.IterateThroughCartesianProduct
- summary: >+
    > [!WARNING]

    > "Modularaddproductle" ist veraltet. Verwenden Sie stattdessen <xref:Microsoft.Quantum.Arithmetic.MultiplyAndAddByModularInteger>.

    >

    > Verwenden Sie @"Microsoft.Quantum.Arithmetic.MultiplyAndAddByModularInteger".

  uid: Microsoft.Quantum.Canon.ModularAddProductLE
- summary: >+
    > [!WARNING]

    > "Modularaddproductphasele" ist veraltet. Verwenden Sie stattdessen <xref:Microsoft.Quantum.Arithmetic.MultiplyAndAddPhaseByModularInteger>.

    >

    > Verwenden Sie @"Microsoft.Quantum.Arithmetic.MultiplyAndAddPhaseByModularInteger".

  uid: Microsoft.Quantum.Canon.ModularAddProductPhaseLE
- summary: >+
    > [!WARNING]

    > "Modularincrementle" ist veraltet. Verwenden Sie stattdessen <xref:Microsoft.Quantum.Arithmetic.ModularIncrementByInteger>.

    >

    > Verwenden Sie @"Microsoft.Quantum.Arithmetic.ModularIncrementByInteger".

  uid: Microsoft.Quantum.Canon.ModularIncrementLE
- summary: >+
    > [!WARNING]

    > "Modularincrementphasele" ist veraltet. Verwenden Sie stattdessen <xref:Microsoft.Quantum.Arithmetic.IncrementPhaseByModularInteger>.

    >

    > Verwenden Sie @"Microsoft.Quantum.Arithmetic.IncrementPhaseByModularInteger".

  uid: Microsoft.Quantum.Canon.ModularIncrementPhaseLE
- summary: >+
    > [!WARNING]

    > "Modularmultiplybyconstantle" ist veraltet. Verwenden Sie stattdessen <xref:Microsoft.Quantum.Arithmetic.MultiplyByModularInteger>.

    >

    > Verwenden Sie @"Microsoft.Quantum.Arithmetic.MultiplyByModularInteger".

  uid: Microsoft.Quantum.Canon.ModularMultiplyByConstantLE
- summary: >-
    Wendet ein Array von Vorgängen an, die von einem Array von Zahlen Zuständen gesteuert werden.

    Das heißt, dass der mehrfach gesteuerte einheitliche Vorgang $U $ angewendet wird, der eine einheitliche $V _J $ anwendet, wenn dies durch $n $-Qubit-Zahlen Status $ \ket{j} $ gesteuert wird.

    $U = \sum ^ {2 ^ n-1} _ {j = 0} \ket{j}\bra{j}\otimes V_j $.
  uid: Microsoft.Quantum.Canon.MultiplexOperations
- summary: >-
    Wendet den Multiplikations gesteuerten einheitlichen Vorgang $U $ an, der eine einheitliche $V _J $ anwendet, wenn dies durch den n-Qubit-Zahlen Status $ \ket{j} $ gesteuert wird.

    $U = \sum ^ {N-1} _ {j = 0} \ket{j}\bra{j}\otimes V_j $.
  uid: Microsoft.Quantum.Canon.MultiplexOperationsBruteForceFromGenerator
- summary: >-
    Wendet einen mehrfach gesteuerten einheitlichen Vorgang $U $ an, der eine einheitliche $V _J $ anwendet, wenn dies durch den n-Qubit-Zahlen Status $ \ket{j} $ gesteuert wird.

    $U = \sum ^ {N-1} _ {j = 0} \ket{j}\bra{j}\otimes V_j $.
  uid: Microsoft.Quantum.Canon.MultiplexOperationsFromGenerator
- summary: Implementierungs Schritt von `MultiplexOperationsFromGenerator` .
  uid: Microsoft.Quantum.Canon.MultiplexOperationsFromGeneratorImpl
- summary: Implementierungs Schritt von multiplexoperations.
  uid: Microsoft.Quantum.Canon.MultiplexOperationsWithAuxRegister
- summary: Wendet eine für ein Array von Qubits bedingte Pauli-Rotation an.
  uid: Microsoft.Quantum.Canon.MultiplexPauli
- summary: Wendet eine Pauli Z-Drehung an, die auf ein Array von Qubits bedingt ist.
  uid: Microsoft.Quantum.Canon.MultiplexZ
- summary: Führt den Identitäts Vorgang (No-OP) für ein Argument aus.
  uid: Microsoft.Quantum.Canon.NoOp
- summary: Permutes Qubits mithilfe des Swap-Vorgangs.
  uid: Microsoft.Quantum.Canon.PermuteQubits
- summary: Führt die Quantum Fourier-Transformation für ein Quantum-Register durch, das eine ganze Zahl in der Big-Endian-Darstellung enthält.
  uid: Microsoft.Quantum.Canon.QFT
- summary: Führt die Quantum Fourier-Transformation für ein Quantum-Register durch, das eine ganze Zahl in der Little-Endian-Darstellung enthält.
  uid: Microsoft.Quantum.Canon.QFTLE
- summary: >-
    Führt einen Phasen Verschiebungs Vorgang aus.

    $R = \boldone-(1-e ^ {i \phi}) \ket{0\cdots 0} \bra{0\cdots 0} $.
  uid: Microsoft.Quantum.Canon.RAll0
- summary: >-
    Führt einen Phasen Verschiebungs Vorgang aus.

    $R = \boldone-(1-e ^ {i \phi}) \ket{1\cdots 1} \bra{1\cdots 1} $.
  uid: Microsoft.Quantum.Canon.RAll1
- summary: Wiederholt einen Vorgang mit einer angegebenen Anzahl von vorkommen.
  uid: Microsoft.Quantum.Canon.Repeat
- summary: Wiederholt einen Vorgang mit einer angegebenen Anzahl von vorkommen.
  uid: Microsoft.Quantum.Canon.RepeatA
- summary: Wiederholt einen Vorgang mit einer angegebenen Anzahl von vorkommen.
  uid: Microsoft.Quantum.Canon.RepeatC
- summary: Wiederholt einen Vorgang mit einer angegebenen Anzahl von vorkommen.
  uid: Microsoft.Quantum.Canon.RepeatCA
- summary: Verwendet Swap-Gates zum Umkehren der Reihenfolge der Qubits in einem Register.
  uid: Microsoft.Quantum.Canon.SwapReverseRegister
- summary: Implementierung des Trotters der ersten Bestellung – Suzuki Integrator.
  uid: Microsoft.Quantum.Canon.Trotter1ImplCA
- summary: Implementierung des Trotters der zweiten Ordnung – Suzuki Integrator.
  uid: Microsoft.Quantum.Canon.Trotter2ImplCA
- summary: Rekursive Implementierung des Trotters der geraden Ordnung – Suzuki Integrator.
  uid: Microsoft.Quantum.Canon.TrotterArbitraryImplCA
summary: ''
uid: Microsoft.Quantum.Canon
metadata:
  ms.openlocfilehash: c8bb0e87c5f22812587ed5eaefcddc4ad04b851b
  ms.sourcegitcommit: a87c1aa8e7453360025e47ba614f25b02ea84ec3
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 11/26/2020
  ms.locfileid: "96204486"

### YamlMime:QSharpType
uid: microsoft.quantum.arithmetic.multiplybymodularinteger
name: MultiplyByModularInteger
type: operation
namespace: Microsoft.Quantum.Arithmetic
summary: >-
  Führt eine modulare Multiplikation durch eine ganzzahlige Konstante in einem Qubit-Register durch.


  Wir geben den Modulo von N und constmultiplikator durch einen an. dieser Vorgang implementiert dann eine einheitliche, die von der folgenden Karte auf Berechnungsbasis definiert wird: | y ⟩ ↦ | a ⋅ y (mod N) ⟩, für alle y zwischen 0 und N-1.
remarks: >-
  - Ein Leit Diagramm und eine Erläuterung finden Sie in Abbildung 7 auf [Seite 8 von arXiv: quant-ph/0205095v3](https://arxiv.org/pdf/quant-ph/0205095v3.pdf#page=8)

  - Dieser Vorgang entspricht u ₐ in [arXiv: quant-ph/0205095v3](https://arxiv.org/pdf/quant-ph/0205095v3.pdf)
syntax: 'operation MultiplyByModularInteger (constMultiplier : Int, modulus : Int, multiplier : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
input:
  content: '(constMultiplier : Int, modulus : Int, multiplier : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: constMultiplier
    summary: Konstante, mit der der Multiplikator multipliziert wird. Muss eine Co-Primzahl sein, um Modulus zu geben.
    isPrimitive: true
    uid: Int
  - name: modulus
    summary: Der Multiplikations Vorgang wird Modulo ausgeführt `modulus`
    isPrimitive: true
    uid: Int
  - name: multiplier
    summary: >-
      Die Zahl, die mit einer Konstanten multipliziert wird.

      Dies ist ein Array von Qubits, das eine ganze Zahl in Little-Endian-bitorder darstellt.
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
metadata:
  ms.openlocfilehash: 4a99aff903b22ad4edcd96f2a980bd65c740025f
  ms.sourcegitcommit: edcf15044d7bdf4f8b21fb8f6af4bde475eb13a0
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 11/05/2019
  ms.locfileid: "73218752"

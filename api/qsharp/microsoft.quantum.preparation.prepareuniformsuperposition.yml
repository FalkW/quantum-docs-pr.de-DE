### YamlMime:QSharpType
uid: microsoft.quantum.preparation.prepareuniformsuperposition
name: PrepareUniformSuperposition
type: operation
namespace: Microsoft.Quantum.Preparation
summary: >-
  Erstellt eine einheitliche Superposition über Zustände, die 0 bis `nIndices`codieren.


  Das heißt, dieser einheitliche $U $ erstellt eine einheitliche Superposition für alle Zahl Zustände $0 $ bis $M-$1, wenn ein Eingabe Status $ \ket{0\cdots 0} $ angegeben wird. Anders ausgedrückt: $ $ \begin{align} u\ket{0}= \frac{1}{\sqrt{m}}\ sum_ {j = 0} ^ {M-1} \ket{j}.

  \end{align} $ $.
examples: >-
  Im folgenden Beispiel wird der Status $ \frac{1}{\sqrt{6}} \ sum_ {j = 0} ^{5}\ket{j} $ auf $3 $ Qubits vorbereitet.


  ```Q#

  let nIndices = 6;

  using(indexRegister = Qubit[3]) {
      PrepareUniformSuperposition(nIndices, LittleEndian(indexRegister));
  }

  ```
syntax: 'operation PrepareUniformSuperposition (nIndices : Int, indexRegister : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
input:
  content: '(nIndices : Int, indexRegister : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: nIndices
    summary: Die gewünschte Anzahl von Zuständen $M $ in der einheitlichen Superposition.
    isPrimitive: true
    uid: Int
  - name: indexRegister
    summary: >-
      Das Qubit-Register, das die Zahlen Zustände `LittleEndian` im-Format speichert.

      Dieses Register muss in der Lage sein, die Zahl $M-$1 zu speichern, und es wird davon ausgegangen, dass es im Status $ \ket{0\cdots 0} $ initialisiert wird.
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
metadata:
  ms.openlocfilehash: a697f4d410ed47c8be3908e2206080a9393260f7
  ms.sourcegitcommit: db23885adb7ff76cbf8bd1160d401a4f0471e549
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 05/01/2020
  ms.locfileid: "82686520"

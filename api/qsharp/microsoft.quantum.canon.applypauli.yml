### YamlMime:QSharpType
uid: microsoft.quantum.canon.applypauli
name: ApplyPauli
type: operation
namespace: microsoft.quantum.canon
summary: Wenn ein Multi-Qubit-Pauli-Operator angegeben ist, wendet den entsprechenden-Vorgang auf ein Register an.
examples: >-
  Die folgenden sind gleichwertig:


  ```qsharp

  ApplyPauli([PauliY, PauliZ, PauliX], target);

  ```


  and


  ```qsharp

  Y(target[0]);

  Z(target[1]);

  X(target[2]);

  ```
syntax: 'operation ApplyPauli (pauli : Pauli[], target : Qubit[]) : Unit'
input:
  content: '(pauli : Pauli[], target : Qubit[])'
  types:
  - name: pauli
    summary: Ein multiqubit-Pauli-Operator, der als Array von Single-Qubit-Pauli-Operatoren dargestellt wird.
    isArray: true
    isPrimitive: true
    uid: Pauli
  - name: target
    summary: Registrieren Sie sich, um den angegebenen Pauli-Vorgang auf anzuwenden.
    isArray: true
    isPrimitive: true
    uid: Qubit
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
metadata:
  ms.openlocfilehash: a12fa423f1eb7685581674323197f198827c936e
  ms.sourcegitcommit: d6ac6f4345be0dd68f1bcd944f44b08e7a3cf346
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 09/02/2020
  ms.locfileid: "89358002"

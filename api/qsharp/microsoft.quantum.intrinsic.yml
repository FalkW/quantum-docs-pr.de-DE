### YamlMime:QSharpNamespace
functions:
- summary: Protokolliert eine Meldung.
  uid: Microsoft.Quantum.Intrinsic.Message
name: Microsoft.Quantum.Intrinsic
newtypes: []
operations:
- summary: >+
    > [!WARNING]

    > Assert ist veraltet. Verwenden Sie stattdessen <xref:Microsoft.Quantum.Diagnostics.AssertMeasurement>.

  uid: Microsoft.Quantum.Intrinsic.Assert
- summary: >+
    > [!WARNING]

    > Assertprob ist veraltet. Verwenden Sie stattdessen <xref:Microsoft.Quantum.Diagnostics.AssertMeasurementProbability>.

  uid: Microsoft.Quantum.Intrinsic.AssertProb
- summary: Wendet das (doppelt kontrollierte – not)-Gate auf drei Qubits an.
  uid: Microsoft.Quantum.Intrinsic.CCNOT
- summary: >-
    Wendet das CNOT-Gate (Controlled-not) auf ein paar von Qubits an.

    \begin{align} \operatschmue{CNOT} \mathrel{: =} \begin{bmatrix} 1 & 0 & 0 & 0 \\ \\ 0 & 1 & 0 & 0 \\ \\ 0 & 0 & 0 & 1 \\ \\ 0 & 0 & 1 & 0 \end{bmatrix}, \end{align}, wobei Zeilen und Spalten im Quantum-Konzept Handbuch als geordnet sind.
  uid: Microsoft.Quantum.Intrinsic.CNOT
- summary: >-
    Wendet den Exponentialwert eines multiqubit-Pauli-Operators an.

    \begin{align} e ^ {i \orta [P_0 \otimes P_1 \cdots P_ {N-1}]}, \end{align}, wobei $P _I $ das $i $ th-Element von `paulis` und $N = $ ist `Length(paulis)` .
  uid: Microsoft.Quantum.Intrinsic.Exp
- summary: >-
    Wendet den Exponentialwert eines multiqubit-Pauli-Operators mit einem Argument an, das von einem dyadic-Bruchteil angegeben wird.

    \begin{align} e ^ {i \pi k [P_0 \otimes P_1 \cdots P_ {N-1}]/2 ^ N}, \end{align}, wobei $P _I $ das $i $ th-Element von `paulis` und WHERE $N = $ ist `Length(paulis)` .
  uid: Microsoft.Quantum.Intrinsic.ExpFrac
- summary: >-
    Wendet die Hadamard-Transformation auf ein einzelnes Qubit an.

    \begin{align} H \mathrel{: =} \frac {1} {\sqrt {2} } \begin{bmatrix} 1 & 1 \\ \\ 1 &-1 \end{bmatrix}. \end{align}
  uid: Microsoft.Quantum.Intrinsic.H
- summary: Führt den Identitäts Vorgang (No-OP) für ein einzelnes Qubit aus.
  uid: Microsoft.Quantum.Intrinsic.I
- summary: >-
    Führt eine Messung eines einzelnen Qubit in der Pauli-$Z $ aus.

    Das Ausgabe Ergebnis wird durch die Distribution \begin{align} \pr (\texttt{Zero} | \ket{\psi}) = \braket{\psi | 0} \braket{0 | \psi}. \end{align}
  uid: Microsoft.Quantum.Intrinsic.M
- summary: >-
    Führt eine gemeinsame Messung von einem oder mehreren Qubits in den angegebenen Pauli-Basen aus.

    Das Ausgabe Ergebnis wird durch die Verteilung angegeben: \begin{align} \pr (\texttt{Zero} | \ket{\psi}) = \bruch12 \braket{\psi \mid | \left (\boldone + P_0 \otimes P_1 \otimes \cdots \otimes P_ {N-1} \right) \mid | \psi}, \end{align}, wobei $P _I $ das $i $ th-Element von ist. `bases` und WHERE $N = \texttt{verlän} (\texttt{Bases}) $. Das heißt, die Messung gibt eine `Result` $d $ zurück, sodass der Eigen Wert des beobachteten Mess Effekts $ (-1) ^ d $ ist.
  uid: Microsoft.Quantum.Intrinsic.Measure
- summary: >-
    Wendet eine Drehung auf die angegebene Pauli-Achse an.

    \begin{align} R_ {\mu} (\orta) \mathrel{: =} e ^ {-i \Der Ta \ sigma_ {\mu}/2}, \end{align} WHERE $ \mu \in \{ i, X, Y, Z \} $.
  uid: Microsoft.Quantum.Intrinsic.R
- summary: >-
    Wendet eine Drehung um den $ \ket {1} $-Zustand um einen angegebenen Winkel an.

    \begin{align} R_1 (\orta) \mathrel{: =} \operatorname{Diag} (1, e ^ {i\der TA}). \end{align}
  uid: Microsoft.Quantum.Intrinsic.R1
- summary: >-
    Wendet eine Drehung über den $ \ket {1} $-Zustand um einen als dyadic-Bruchteil angegebenen Winkel an.

    \begin{align} R_1 (n, k) \mathrel{: =} \operatschmue{Diag} (1, e ^ {i \pi k/2 ^ n}). \end{align}

    > [!WARNING] > diesem Vorgang wird die **gegenüberliegende** Zeichen Konvention aus > verwendet @"microsoft.quantum.intrinsic.r" , und der > Faktor von $1/2 $, der in enthalten ist, ist nicht enthalten @"microsoft.quantum.intrinsic.r1" .
  uid: Microsoft.Quantum.Intrinsic.R1Frac
- summary: >-
    Wendet eine Drehung um die angegebene Pauli-Achse um einen als dyadic-Bruchteil angegebenen Winkel an.

    \begin{align} R_ {\mu} (n, k) \mathrel{: =} e ^ {i \pi n \ sigma_ {\mu}/2 ^ k}, \end{align} WHERE $ \mu \in \{ i, X, Y, Z \} $.

    > [!WARNING] > dieser Vorgang die **gegenüberliegende** Zeichen Konvention aus > verwendet @"microsoft.quantum.intrinsic.r" .
  uid: Microsoft.Quantum.Intrinsic.RFrac
- summary: >+
    > [!WARNING]

    > Random ist veraltet. Verwenden Sie stattdessen <xref:Microsoft.Quantum.Random.DrawCategorical>.

  uid: Microsoft.Quantum.Intrinsic.Random
- summary: Wenn ein einzelnes Qubit angegeben ist, wird es gemessen und sichergestellt, dass es sich im | 0 ⟩-Zustand befindet, sodass es sicher freigegeben werden kann.
  uid: Microsoft.Quantum.Intrinsic.Reset
- summary: Messen Sie bei einem Array von Qubits diese, und stellen Sie sicher, dass Sie sich im Zustand | 0 ⟩ befinden, sodass Sie sicher freigegeben werden können.
  uid: Microsoft.Quantum.Intrinsic.ResetAll
- summary: >-
    Wendet eine Drehung zum $x $-Achse um einen angegebenen Winkel an.

    \begin{align} R_x (\orta) \mathrel{: =} e ^ {-i \erta \ sigma_x/2} = \begin{bmatrix} \cos \bruchteil {\thta} {2} &-i\sin \bruchteil {\thta} {2} \\ \\ -i\sin \bruchteil {\thta} {2} & \cos \bruch {\thta} {2} \end{bmatrix}.   \end{align}
  uid: Microsoft.Quantum.Intrinsic.Rx
- summary: >-
    Wendet eine Drehung zum $y $-Achse um einen angegebenen Winkel an.

    \begin{align} R_y (\orta) \mathrel{: =} e ^ {-i \erta \ sigma_y/2} = \begin{bmatrix} \cos \bruchteil {\thta} {2} &-\sin \bruchteil {\thta} {2} \\ \\ \sin \bruchteil {\thta} {2} & \cos \bruchteil {\thta} {2} \end{bmatrix}.   \end{align}
  uid: Microsoft.Quantum.Intrinsic.Ry
- summary: >-
    Wendet eine Drehung zum $z $-Achse um einen angegebenen Winkel an.

    \begin{align} R_z (\orta) \mathrel{: =} e ^ {-i \Der Ta \ sigma_z/2} = \begin{bmatrix} e ^ {-i \Der Ta/2} & 0 \\ \\ 0 & e ^ {i \Der Ta/2} \end{bmatrix}. \end{align}
  uid: Microsoft.Quantum.Intrinsic.Rz
- summary: Wendet das S-Gate auf ein einzelnes Qubit an.
  uid: Microsoft.Quantum.Intrinsic.S
- summary: >-
    Wendet das Auslagerungs Gate auf ein paar von Qubits an.

    \begin{align} \operatorname{tauap} \mathrel{: =} \begin{bmatrix} 1 & 0 & 0 & 0 \\ \\ 0 & 0 & 1 & 0 \\ \\ 0 & 1 & 0 & 0 \\ \\ 0 & 0 & 0 & 1 \end{bmatrix}, \end{align}, wobei Zeilen und Spalten im Quantum-Konzept Handbuch als geordnet sind.
  uid: Microsoft.Quantum.Intrinsic.SWAP
- summary: Wendet das T-Gate auf ein einzelnes Qubit an.
  uid: Microsoft.Quantum.Intrinsic.T
- summary: >-
    Wendet die Pauli-$X $ Gate an.

    \begin{align} \ sigma_x \mathrel{: =} \begin{bmatrix} 0 & 1 \\ \\ 1 & 0 \end{bmatrix}. \end{align}
  uid: Microsoft.Quantum.Intrinsic.X
- summary: >-
    Wendet die Pauli-$Y $ Gate an.

    \begin{align} \ sigma_y \mathrel{: =} \begin{bmatrix} 0 &-i \\ \\ i & 0 \end{bmatrix}. \end{align}
  uid: Microsoft.Quantum.Intrinsic.Y
- summary: >-
    Wendet die Pauli-$Z $ Gate an.

    \begin{align} \ sigma_z \mathrel{: =} \begin{bmatrix} 1 & 0 \\ \\ 0 &-1 \end{bmatrix}. \end{align}
  uid: Microsoft.Quantum.Intrinsic.Z
summary: ''
uid: Microsoft.Quantum.Intrinsic
metadata:
  ms.openlocfilehash: b88a931baa553d2e075bec01ce112b58b4fc913c
  ms.sourcegitcommit: 29e0d88a30e4166fa580132124b0eb57e1f0e986
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 10/27/2020
  ms.locfileid: "92707463"

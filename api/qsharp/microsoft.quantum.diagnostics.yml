### YamlMime:QSharpNamespace
functions:
- summary: Bestätigt, dass zwei Arrays von booleschen Werten gleich sind.
  uid: Microsoft.Quantum.Diagnostics.AllEqualityFactB
- summary: Bestätigt, dass zwei Arrays von ganzzahligen Werten gleich sind.
  uid: Microsoft.Quantum.Diagnostics.AllEqualityFactI
- summary: Deklariert, dass eine klassische Bedingung false ist.
  uid: Microsoft.Quantum.Diagnostics.Contradiction
- summary: Sichert den Status des aktuellen Ziel Computers.
  uid: Microsoft.Quantum.Diagnostics.DumpMachine
- summary: Sichert den aktuellen Status des Ziel Computers, der mit den angegebenen Qubits verknüpft ist.
  uid: Microsoft.Quantum.Diagnostics.DumpRegister
- summary: Bestätigt, dass eine klassische boolesche Variable über den erwarteten Wert verfügt.
  uid: Microsoft.Quantum.Diagnostics.EqualityFactB
- summary: Bestätigt, dass eine komplexe Zahl über den erwarteten Wert verfügt.
  uid: Microsoft.Quantum.Diagnostics.EqualityFactC
- summary: Bestätigt, dass eine komplexe Zahl über den erwarteten Wert verfügt.
  uid: Microsoft.Quantum.Diagnostics.EqualityFactCP
- summary: Bestätigt, dass eine klassische int-Variable über den erwarteten Wert verfügt.
  uid: Microsoft.Quantum.Diagnostics.EqualityFactI
- summary: Bestätigt, dass eine klassische bigint-Variable über den erwarteten Wert verfügt.
  uid: Microsoft.Quantum.Diagnostics.EqualityFactL
- summary: Bestätigt, dass eine klassische Ergebnisvariable über den erwarteten Wert verfügt.
  uid: Microsoft.Quantum.Diagnostics.EqualityFactR
- summary: Stellt den Anspruch dar, dass ein klassischer Gleit Komma Wert den erwarteten Wert bis zu einer bestimmten absoluten Toleranz aufweist.
  uid: Microsoft.Quantum.Diagnostics.EqualityWithinToleranceFact
- summary: Deklariert, dass eine klassische Bedingung true ist.
  uid: Microsoft.Quantum.Diagnostics.Fact
- summary: Interne Funktion, die verwendet wird, um mit aussagekräftigen Fehlermeldungen fehlschlägt
  uid: Microsoft.Quantum.Diagnostics.FormattedFailure
- summary: Bestätigt, dass eine klassische komplexe Zahl den erwarteten Wert bis zu einer kleinen Toleranz von 1 e-10 aufweist.
  uid: Microsoft.Quantum.Diagnostics.NearEqualityFactC
- summary: Bestätigt, dass eine klassische komplexe Zahl den erwarteten Wert bis zu einer kleinen Toleranz von 1 e-10 aufweist.
  uid: Microsoft.Quantum.Diagnostics.NearEqualityFactCP
- summary: Bestätigt, dass ein klassischer Gleit Komma Wert den erwarteten Wert bis zu einer kleinen Toleranz von 1E-10 aufweist.
  uid: Microsoft.Quantum.Diagnostics.NearEqualityFactD
name: Microsoft.Quantum.Diagnostics
newtypes:
- summary: Vom Compiler erkanntes Attribut, über das ein alternativer Name definiert werden kann, der beim Laden eines Typs oder Aufruf baren zu Testzwecken verwendet werden kann.
  uid: Microsoft.Quantum.Diagnostics.EnableTestingViaName
- summary: Vom Compiler erkanntes Attribut, das zum Markieren eines Komponententests verwendet wird.
  uid: Microsoft.Quantum.Diagnostics.Test
operations:
- summary: Bei einem Aufruf dieses Vorgangs und seines Adjoint-Vorgangs bestätigt, dass ein angegebener Vorgang höchstens eine bestimmte Anzahl von Vorkommen aufgerufen wird.
  uid: Microsoft.Quantum.Diagnostics.AllowAtMostNCallsCA
- summary: Bei einem Aufrufe dieses Vorgangs und seines Adjoint-Vorgangs wird von bestätigt, dass höchstens eine angegebene Anzahl zusätzlicher Qubits mit using-Anweisungen zugeordnet wird.
  uid: Microsoft.Quantum.Diagnostics.AllowAtMostNQubits
- summary: Bestätigen Sie, dass die angegebenen Qubits alle in "$ \ket {0} $ State" sind.
  uid: Microsoft.Quantum.Diagnostics.AssertAllZero
- summary: Bestätigen Sie, dass die angegebenen Qubits alle in $ \ket {0} $ State bis zu einer gegebenen Toleranz aufweisen.
  uid: Microsoft.Quantum.Diagnostics.AssertAllZeroWithinTolerance
- summary: Bestätigt, dass das Messen der angegebenen Qubits in der angegebenen Pauli-Basis immer das angegebene Ergebnis hat.
  uid: Microsoft.Quantum.Diagnostics.AssertMeasurement
- summary: Bestätigt, dass das Messen der angegebenen Qubits in der angegebenen Pauli-Basis das angegebene Ergebnis mit der angegebenen Wahrscheinlichkeit innerhalb einiger Toleranz hat.
  uid: Microsoft.Quantum.Diagnostics.AssertMeasurementProbability
- summary: >-
    Bei zwei Vorgängen wird von bestätigt, dass Sie für alle Eingabe Zustände identisch agieren.

    Diese Assertionen werden implementiert, indem die Aktion der Vorgänge für alle Zustände der Form $V _0 \otimes... \otimes v_ {n-1} $, wobei $V _K $ einem der Zustände $ \ket {0} $, $ \ket {1} $, $ \ket{+} $ und $ \ket{i} $ (+ 1 eigen Status des Pauli Y-Operators) entspricht.

    Diese Assertion verwendet $n $ Qubits und erfordert mehrere Aufrufe der zu vergleichenden Vorgänge.
  uid: Microsoft.Quantum.Diagnostics.AssertOperationsEqualInPlace
- summary: Überprüft, ob der Vorgang mit `givenU` dem Vorgang `expectedU` auf der angegebenen Eingabe Größe identisch ist, indem die Aktion der Vorgänge nur für die Vektoren von der Berechnungsbasis überprüft wird. Dies ist eine erforderliche, aber nicht ausreichende Bedingung für die Gleichheit von zwei uniflüssen.
  uid: Microsoft.Quantum.Diagnostics.AssertOperationsEqualInPlaceCompBasis
- summary: >-
    Bei zwei Vorgängen wird von bestätigt, dass Sie für alle Eingabe Zustände identisch agieren.

    Diese Assertionen werden mithilfe von "Choi – jamiołkowski" (isomorphism) implementiert, um die Behauptung auf eine der Qubit-Zustands Assertionen für zwei entkoppelt-Register zu reduzieren. Folglich benötigt dieser Vorgang nur einen einzelnen Vorgang für jeden zu testenden Vorgang, erfordert jedoch doppelt so viele Qubits, die zugewiesen werden müssen. Diese Assertion kann beispielsweise verwendet werden, um sicherzustellen, dass eine optimierte Version eines Vorgangs identisch mit der naive Implementierung verhält oder dass ein Vorgang, der für einen Bereich von nicht-Quantum-Eingaben agiert, mit bekannten Fällen übereinstimmt.
  uid: Microsoft.Quantum.Diagnostics.AssertOperationsEqualReferenced
- summary: Bestätigt, dass die Phase eines gleich geordneten Superposition-Zustands den erwarteten Wert aufweist.
  uid: Microsoft.Quantum.Diagnostics.AssertPhase
- summary: Bestätigt, dass sich das Qubit `q` im erwarteten eigen Zustand des Pauli Z-Operators befindet.
  uid: Microsoft.Quantum.Diagnostics.AssertQubit
- summary: >-
    Bestätigt, dass ein Qubit im erwarteten Zustand ist.

    `expected` stellt einen komplexen Vektor dar, $ \ket{\psi} = \begin{bmatrix}a & b\end {bmatrix} ^ {\mathrm{T}} $. Das erste Element der Tupel, das jede $a $ darstellt, $b $ der reelle Teil der komplexen Zahl ist, während das zweite Element der imaginäre Teil ist. Das letzte Argument definiert die Toleranz, mit der die-Assertionen durchgeführt werden.
  uid: Microsoft.Quantum.Diagnostics.AssertQubitIsInStateWithinTolerance
- summary: Bestätigt, dass das Qubit den `q` erwarteten Zustand des Pauli Z-Operators bis zu einer gegebenen Toleranz aufweist.
  uid: Microsoft.Quantum.Diagnostics.AssertQubitWithinTolerance
- summary: Zeigt bei einem Vorgang Diagnoseinformationen zu dem Vorgang an, der vom aktuellen Ausführungs Ziel verfügbar gemacht wird.
  uid: Microsoft.Quantum.Diagnostics.DumpOperation
- summary: Verwendet dumpregister, um die Diagnose für den Status eines Verweis-und Ziel Registers bereitzustellen. Wird als separater Vorgang geschrieben, um das Überschreiben und interpretieren als getrennte Register zuzulassen, anstatt als einzelnes kombiniertes Register.
  uid: Microsoft.Quantum.Diagnostics.DumpReferenceAndTarget
- summary: Überprüft, ob das Ergebnis der Anwendung von zwei Vorgängen `givenU` und `expectedU` des Basis Zustands gleich ist. Der Basisstatus wird durch den- `basis` Parameter beschrieben. <xref:microsoft.quantum.extensions.fliptobasis>Weitere Informationen zu dieser Beschreibung finden Sie unter function.
  uid: Microsoft.Quantum.Diagnostics._assertEqualOnBasisVector
- summary: >-
    Wendet die unimaps an, die $ \ket {0} \otimes\cdoz\ket {0} $ zu $ \ket{\ psi_0} \otimes \ket{\ psi_ {n-1}} $ zuordnen, wobei $ \ket{\ psi_k} $ von abhängt `basis[k]` .

    Die Entsprechung zwischen Wert `basis[k]` und $ \ket{\ psi_k} $ lautet wie folgt:

    - `basis[k]=0` $ \rightarrow \ket {0} $. - `basis[k]=1` $ \rightarrow \ket {1} $. - `basis[k]=2` $ \rightarrow \ket{+} $. - `basis[k]=3` $ \rightarrow \ket{i} $ (+ 1 eigen Status von Pauli Y).
  uid: Microsoft.Quantum.Diagnostics._flipToBasis
- summary: Iteriert eine Variable über ein kartesisches Produkt [0, Begrenzungen [0]-1] × [0, Begrenzungen [1]-1] × [0, Begrenzungen [length (Begrenzungen)-1]-1] und ruft op (arr) für jedes Element des kartesischen Produkts auf.
  uid: Microsoft.Quantum.Diagnostics._iterateThroughCartesianPower
- summary: >-
    Bei zwei Registern wird der Status der vollständig entkoppelt zwischen jedem Paar von Qubits in den entsprechenden Registern vorbereitet. Alle Qubits müssen im Zustand | 0 ⟩ beginnen.

    Das Ergebnis ist, dass sich die entsprechenden Paare von Qubits aus jedem Register in der $ \bra{\ beta_ {00} } \ket{\ beta_ {00} } $ befinden.
  uid: Microsoft.Quantum.Diagnostics._prepareEntangledState
summary: ''
uid: Microsoft.Quantum.Diagnostics
metadata:
  ms.openlocfilehash: d39cd1cac6121bd411fc0c87024254599bbb0641
  ms.sourcegitcommit: 29e0d88a30e4166fa580132124b0eb57e1f0e986
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 10/27/2020
  ms.locfileid: "92702869"
